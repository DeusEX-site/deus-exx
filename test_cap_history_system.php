<?php

require_once 'vendor/autoload.php';

use App\Models\Cap;
use App\Models\CapHistory;
use App\Models\Message;
use App\Models\Chat;
use App\Services\CapAnalysisService;

// Bootstrap Laravel
$app = require_once 'bootstrap/app.php';
$app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø...\n\n";

$capAnalysisService = new CapAnalysisService();

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
$chat = Chat::firstOrCreate([
    'chat_id' => -9999999,
    'type' => 'group',
    'title' => 'Test Cap History Chat'
]);

echo "üìù –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã—Ö –∫–∞–ø\n";

$originalMessage = "Affiliate: G06
Recipient: TMedia
Geo: DE AT CH
CAP: 20 30 30
Total: 100 200 200
Language: de en ru
Funnel: DeusEX, DeusEX2
Schedule: 18:00/01:00 18:00/02:00 GMT+03:00
Date: 24.02 25.02";

$message1 = Message::create([
    'chat_id' => $chat->id,
    'message' => $originalMessage,
    'user' => 'Test User',
    'telegram_message_id' => 1001,
    'telegram_user_id' => 123456
]);

$result1 = $capAnalysisService->analyzeAndSaveCapMessage($message1->id, $originalMessage);

echo "–°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: " . $result1['cap_entries_count'] . "\n";
echo "–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: " . $result1['updated_entries_count'] . "\n";

$totalCaps = Cap::where('affiliate_name', 'G06')->where('recipient_name', 'TMedia')->count();
echo "–í—Å–µ–≥–æ –∫–∞–ø –≤ –±–∞–∑–µ: {$totalCaps}\n\n";

echo "üîÑ –®–∞–≥ 2: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã –¥–ª—è DE (—Ç–æ–ª—å–∫–æ Total)\n";

$partialUpdateMessage = "Affiliate: G06
Recipient: TMedia
Geo: DE
CAP: 20
Total: 101";

$message2 = Message::create([
    'chat_id' => $chat->id,
    'message' => $partialUpdateMessage,
    'user' => 'Test User',
    'telegram_message_id' => 1002,
    'telegram_user_id' => 123456
]);

$result2 = $capAnalysisService->analyzeAndSaveCapMessage($message2->id, $partialUpdateMessage);

echo "–°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: " . $result2['cap_entries_count'] . "\n";
echo "–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: " . $result2['updated_entries_count'] . "\n";

$totalCapsAfter = Cap::where('affiliate_name', 'G06')->where('recipient_name', 'TMedia')->count();
$historyCount = CapHistory::whereHas('cap', function($q) {
    $q->where('affiliate_name', 'G06')->where('recipient_name', 'TMedia');
})->count();

echo "–í—Å–µ–≥–æ –∫–∞–ø –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$totalCapsAfter}\n";
echo "–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {$historyCount}\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø–∏—Å–∏
$deCap = Cap::where('affiliate_name', 'G06')
            ->where('recipient_name', 'TMedia')
            ->whereJsonContains('geos', 'DE')
            ->first();
            
$atCap = Cap::where('affiliate_name', 'G06')
            ->where('recipient_name', 'TMedia')
            ->whereJsonContains('geos', 'AT')
            ->first();
            
$chCap = Cap::where('affiliate_name', 'G06')
            ->where('recipient_name', 'TMedia')
            ->whereJsonContains('geos', 'CH')
            ->first();

echo "‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏:\n";

if ($deCap && $deCap->total_amount == 101) {
    echo "‚úÖ DE –∫–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (Total: {$deCap->total_amount})\n";
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
    if ($deCap->language == 'de' && $deCap->funnel == 'DeusEX') {
        echo "‚úÖ DE –∫–∞–ø–∞: –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n";
    } else {
        echo "‚ùå DE –∫–∞–ø–∞: –¥—Ä—É–≥–∏–µ –ø–æ–ª—è –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ (Language: {$deCap->language}, Funnel: {$deCap->funnel})\n";
    }
} else {
    echo "‚ùå DE –∫–∞–ø–∞ –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n";
}

if ($atCap && $atCap->total_amount == 200) {
    echo "‚úÖ AT –∫–∞–ø–∞ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (Total: {$atCap->total_amount})\n";
} else {
    echo "‚ùå AT –∫–∞–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞\n";
}

if ($chCap && $chCap->total_amount == 200) {
    echo "‚úÖ CH –∫–∞–ø–∞ –æ—Å—Ç–∞–ª–∞—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (Total: {$chCap->total_amount})\n";
} else {
    echo "‚ùå CH –∫–∞–ø–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∞\n";
}

if ($historyCount == 1) {
    echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ 1 –∑–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏\n";
} else {
    echo "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: {$historyCount}\n";
}

if ($totalCapsAfter == $totalCaps) {
    echo "‚úÖ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å\n";
} else {
    echo "‚ùå –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —Å {$totalCaps} –Ω–∞ {$totalCapsAfter}\n";
}

echo "\nüìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:\n";
$history = CapHistory::whereHas('cap', function($q) {
    $q->where('affiliate_name', 'G06')->where('recipient_name', 'TMedia');
})->with('cap')->get();

foreach ($history as $historyRecord) {
    echo "- –ì–µ–æ: {$historyRecord->geos[0]}, Total: {$historyRecord->total_amount}, –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {$historyRecord->archived_at}\n";
}

echo "\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n";

Cap::where('affiliate_name', 'G06')->where('recipient_name', 'TMedia')->delete();
CapHistory::whereIn('id', $history->pluck('id'))->delete();
Message::whereIn('id', [$message1->id, $message2->id])->delete();
$chat->delete();

echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã\n";

echo "\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n";
echo "\nüìã –ò—Ç–æ–≥ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:\n";
echo "‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø (caps_history)\n";
echo "‚úÖ –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ø–æ affiliate_name + recipient_name + geo\n";
echo "‚úÖ –ü—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ø—ã —Å—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –∏—Å—Ç–æ—Ä–∏–∏\n";
echo "‚úÖ –û–±–Ω–æ–≤–ª—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∫–∞–∑–∞–Ω—ã –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n";
echo "‚úÖ –ü–æ–ª—è, –Ω–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π\n";
echo "‚úÖ –ù–µ —Å–æ–∑–¥–∞—é—Ç—Å—è –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏\n";
echo "‚úÖ –ó–∞–ø–∏—Å–∏, –Ω–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –≤ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–µ —É–¥–∞–ª—è—é—Ç—Å—è\n"; 