#!/bin/bash

# Enable UTF-8 encoding
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored messages
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

print_separator() {
    echo -e "${CYAN}$(printf '=%.0s' {1..50})${NC}"
}

# Function to check file existence
check_file() {
    if [ ! -f "$1" ]; then
        print_error "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $1"
        return 1
    fi
    return 0
}

# Function to check command availability
check_command() {
    if ! command -v "$1" &> /dev/null; then
        print_error "–ö–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ $1 –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ PATH"
        return 1
    fi
    return 0
}

# Header
clear
print_separator
print_header "     –°–ò–°–¢–ï–ú–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í –ö–ê–ü"
print_separator
echo

print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

# Check if we're in the correct directory
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
if ! check_file "artisan"; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Laravel –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi
print_success "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª artisan"

# Check if PHP is available
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PHP..."
if ! check_command "php"; then
    exit 1
fi

# Check PHP version
PHP_VERSION=$(php -r "echo PHP_VERSION;")
print_success "PHP –Ω–∞–π–¥–µ–Ω (–≤–µ—Ä—Å–∏—è: $PHP_VERSION)"

# Check if Laravel is properly configured
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Laravel..."
if ! check_file ".env"; then
    print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

if ! check_file "composer.json"; then
    print_error "–§–∞–π–ª composer.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi
print_success "Laravel –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# Check required test files
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
required_files=(
    "DynamicCapTestGenerator.php"
    "DynamicCapTestEngine.php" 
    "DynamicCapCombinationGenerator.php"
    "DynamicCapReportGenerator.php"
    "dynamic_cap_test_runner.php"
    "app/Console/Commands/TestDynamicCapSystem.php"
)

missing_files=0
for file in "${required_files[@]}"; do
    if check_file "$file"; then
        print_success "‚úì $file"
    else
        missing_files=$((missing_files + 1))
    fi
done

if [ $missing_files -gt 0 ]; then
    print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $missing_files —Ñ–∞–π–ª(–æ–≤) —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ"
    exit 1
fi

print_success "–í—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã"

echo
print_separator
print_header "üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
print_separator
echo

print_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "   üìã –¢–∏–ø: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
echo "   üìù –í—ã–≤–æ–¥: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
echo "   ‚è∏Ô∏è  –ü–∞—É–∑–∞: –ù–∞ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ"
echo "   üîÑ –û—á–∏—Å—Ç–∫–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
echo "   ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: 30 –º–∏–Ω—É—Ç"

echo
print_warning "–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!"
print_info "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ 16 —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞–ø–∞–º–∏"

echo
print_info "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–ª–∏ Ctrl+C –¥–ª—è –æ—Ç–º–µ–Ω—ã..."
read -r

echo
print_separator
print_header "‚ö° –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í"
print_separator

# Record start time
start_time=$(date +%s)
print_info "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)"

echo
print_info "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤..."

# Run the tests and capture exit code
php artisan test:dynamic-cap-system full --detailed --pause-on-error
exit_code=$?

# Record end time
end_time=$(date +%s)
duration=$((end_time - start_time))

echo
print_separator
print_header "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
print_separator

print_info "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"
print_info "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $duration —Å–µ–∫—É–Ω–¥"

if [ $exit_code -eq 0 ]; then
    print_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    print_success "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    print_error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: $exit_code)"
    print_warning "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π"
fi

echo
print_separator
print_info "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
read -r 