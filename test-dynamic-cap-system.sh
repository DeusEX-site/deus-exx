#!/bin/bash

# Enable UTF-8 encoding
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored messages
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

print_separator() {
    echo -e "${CYAN}$(printf '=%.0s' {1..60})${NC}"
}

# Function to check file existence
check_file() {
    if [ ! -f "$1" ]; then
        print_error "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $1"
        return 1
    fi
    return 0
}

# Function to check command availability
check_command() {
    if ! command -v "$1" &> /dev/null; then
        print_error "–ö–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return 1
    fi
    return 0
}

# Header
clear
print_separator
print_header "  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –ö–ê–ü –ß–ï–†–ï–ó –í–°–¢–†–û–ï–ù–ù–£–Æ –õ–û–ì–ò–ö–£"
print_separator
echo

print_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ TelegramWebhookController + CapAnalysisService"
print_info "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–∏—Å—Ç–µ–º—É - —á–∞—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!"
print_info "–¢–µ—Å—Ç—ã —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ–∑–¥–∞—é—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é!"

# Check if we're in the correct directory
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
if ! check_file "artisan"; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Laravel –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi
print_success "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª artisan"

# Check if PHP is available
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PHP..."
if ! check_command "php"; then
    exit 1
fi

# Check PHP version
PHP_VERSION=$(php -r "echo PHP_VERSION;")
print_success "PHP –Ω–∞–π–¥–µ–Ω (–≤–µ—Ä—Å–∏—è: $PHP_VERSION)"

# Check Laravel configuration
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Laravel..."
if ! check_file ".env"; then
    print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

# Test database connection
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
db_test=$(php artisan migrate:status 2>&1)
if [ $? -eq 0 ]; then
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:"
    echo "$db_test" | head -5
    exit 1
fi

# Test basic artisan commands
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ Laravel..."
php artisan --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
    print_success "Laravel –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Laravel –∫–æ–º–∞–Ω–¥–∞–º–∏"
    exit 1
fi

echo
print_separator
print_header "üìä –≠–¢–ê–ü 1: –°–û–ó–î–ê–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•"
print_separator

print_info "–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É..."
print_info "–≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ –±–∞–∑–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
print_info "–≠—Ç–∞–ø 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –í–°–ï–• —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á–∞—Ç—ã"
print_info "–°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç —á–∞—Ç—ã –∏ –Ω–∞—Ö–æ–¥–∏—Ç –∫–∞–ø—ã"

chat_count=50
operations="all"
combinations="full"

print_info "–°–æ–∑–¥–∞–Ω–∏–µ $chat_count —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —Å –í–°–ï–ú–ò —Ç–∏–ø–∞–º–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –í–°–ï–ú–ò –ø–æ–ª—è–º–∏"
print_info "–†–µ–∂–∏–º: –í—Å–µ 16 —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π + –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞ (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–∞–∂–¥—ã–π —á–∞—Ç)"
print_info "–ü–æ–ª—è: –í—Å–µ (schedule, date, language, funnel, total, pending_acq, freeze_status_on_acq)"
print_info "–í–Ω–∏–º–∞–Ω–∏–µ: –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π, —á–µ–º —á–∞—Ç–æ–≤!"

# Record start time
start_time=$(date +%s)

# Create test data using DynamicCapTestGenerator
print_info "–ó–∞–ø—É—Å–∫: php artisan test:create-chats $chat_count --operations=$operations --combinations=$combinations"
php artisan test:create-chats $chat_count --operations=$operations --combinations=$combinations

if [ $? -eq 0 ]; then
    print_success "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!"
else
    print_error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

echo
print_separator
print_header "üîç –≠–¢–ê–ü 2: –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•"
print_separator

print_info "–ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –≤ –±–∞–∑–µ..."

# Check chats
chat_count_db=$(php artisan tinker --execute="echo App\\Models\\Chat::count();")
print_info "–ß–∞—Ç–æ–≤ –≤ –±–∞–∑–µ: $chat_count_db"

# Check messages
message_count_db=$(php artisan tinker --execute="echo App\\Models\\Message::count();")
print_info "–°–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ: $message_count_db"

# Check caps
cap_count_db=$(php artisan tinker --execute="echo App\\Models\\Cap::count();")
print_info "–ö–∞–ø –≤ –±–∞–∑–µ: $cap_count_db"

# Check cap history
cap_history_count_db=$(php artisan tinker --execute="echo App\\Models\\CapHistory::count();")
print_info "–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø: $cap_history_count_db"

if [ "$chat_count_db" -gt 0 ] && [ "$message_count_db" -gt 0 ]; then
    print_success "–ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
    exit 1
fi

if [ "$cap_count_db" -gt 0 ]; then
    print_success "–ö–∞–ø—ã –Ω–∞–π–¥–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
else
    print_warning "–ö–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - –≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ —Å–æ–¥–µ—Ä–∂–∞–ª–∏ –∫–∞–ø—ã"
fi

echo
print_separator
print_header "üß™ –≠–¢–ê–ü 3: –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´"
print_separator

print_info "–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ..."
print_info "–¢–µ—Å—Ç—ã –ù–ï —Å–æ–∑–¥–∞—é—Ç –¥–∞–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ!"

TEST_TYPE="full"
print_info "–†–µ–∂–∏–º: –ü–æ–ª–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"

echo
print_separator
print_header "‚ö° –í–´–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–í–ï–†–û–ö"
print_separator

print_info "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏..."

# Test 1: Check Chat model and relationships
print_info "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Chat –∏ —Å–≤—è–∑–µ–π..."
php artisan tinker --execute="
    \$chats = App\\Models\\Chat::with('messages')->get();
    echo '–ß–∞—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: ' . \$chats->filter(function(\$chat) { return \$chat->messages->count() > 0; })->count();
"

# Test 2: Check Message model and relationships
print_info "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Message –∏ —Å–≤—è–∑–µ–π..."
php artisan tinker --execute="
    \$messages = App\\Models\\Message::with('chat', 'caps')->get();
    echo '–°–æ–æ–±—â–µ–Ω–∏–π —Å–æ —Å–≤—è–∑—è–º–∏: ' . \$messages->count();
"

# Test 3: Check Cap analysis results
print_info "3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –∫–∞–ø..."
php artisan tinker --execute="
    \$caps = App\\Models\\Cap::with('message', 'history')->get();
    echo '–ö–∞–ø —Å–æ —Å–≤—è–∑—è–º–∏: ' . \$caps->count();
    if (\$caps->count() > 0) {
        \$firstCap = \$caps->first();
        \$geos = is_array(\$firstCap->geos) ? implode(', ', \$firstCap->geos) : \$firstCap->geos;
        echo PHP_EOL . '–ü—Ä–∏–º–µ—Ä –∫–∞–ø—ã: ' . \$geos . ' - ' . \$firstCap->total;
    }
"

# Test 4: Check CapHistory functionality
print_info "4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ CapHistory..."
php artisan tinker --execute="
    \$history = App\\Models\\CapHistory::with('cap')->get();
    echo '–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: ' . \$history->count();
"

# Test 5: Check CapAnalysisService integration
print_info "5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ CapAnalysisService..."
php artisan tinker --execute="
    \$service = new App\\Services\\CapAnalysisService();
    echo 'CapAnalysisService —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ';
"

# Test 6: Show detailed statistics
print_info "6. –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞..."
php artisan tinker --execute="
    echo '=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ß–ê–¢–û–í ===' . PHP_EOL;
    \$chats = App\\Models\\Chat::selectRaw('type, COUNT(*) as count')->groupBy('type')->get();
    foreach (\$chats as \$chat) {
        echo \$chat->type . ': ' . \$chat->count . PHP_EOL;
    }
    
    echo PHP_EOL . '=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ===' . PHP_EOL;
    \$messages = App\\Models\\Message::selectRaw('message_type, COUNT(*) as count')->groupBy('message_type')->get();
    foreach (\$messages as \$message) {
        echo (\$message->message_type ?? 'text') . ': ' . \$message->count . PHP_EOL;
    }
    
    echo PHP_EOL . '=== –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ö–ê–ü ===' . PHP_EOL;
    \$caps = App\\Models\\Cap::selectRaw('geos, COUNT(*) as count')->groupBy('geos')->limit(10)->get();
    foreach (\$caps as \$cap) {
        echo \$cap->geos . ': ' . \$cap->count . PHP_EOL;
    }
"

# Record end time
end_time=$(date +%s)
duration=$((end_time - start_time))

echo
print_separator
print_header "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
print_separator

print_info "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"
print_info "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $duration —Å–µ–∫—É–Ω–¥"

print_success "‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
print_success "‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É"
print_success "‚úÖ –ß–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É"
print_success "‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ TelegramWebhookController"
print_success "‚úÖ –ö–∞–ø—ã –Ω–∞–π–¥–µ–Ω—ã —á–µ—Ä–µ–∑ CapAnalysisService"
print_success "‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ —Ç–æ–ª—å–∫–æ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –Ω–µ —Å–æ–∑–¥–∞–≤–∞—è –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é"

echo
print_separator
print_info "–ì–æ—Ç–æ–≤–æ! –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é –ª–æ–≥–∏–∫—É."
print_info "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ‚Üí —Å–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–µ—Ç —á–∞—Ç—ã ‚Üí –Ω–∞—Ö–æ–¥–∏—Ç –∫–∞–ø—ã" 