#!/bin/bash

# Enable UTF-8 encoding
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored messages
print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header() {
    echo -e "${PURPLE}$1${NC}"
}

print_separator() {
    echo -e "${CYAN}$(printf '=%.0s' {1..50})${NC}"
}

# Function to check file existence
check_file() {
    if [ ! -f "$1" ]; then
        print_error "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª: $1"
        return 1
    fi
    return 0
}

# Function to check command availability
check_command() {
    if ! command -v "$1" &> /dev/null; then
        print_error "–ö–æ–º–∞–Ω–¥–∞ '$1' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        print_info "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ $1 –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ PATH"
        return 1
    fi
    return 0
}

# Header
clear
print_separator
print_header "     –°–ò–°–¢–ï–ú–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –¢–ï–°–¢–û–í –ö–ê–ü"
print_separator
echo

print_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."

# Check if we're in the correct directory
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏..."
if ! check_file "artisan"; then
    print_error "–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Laravel –ø—Ä–æ–µ–∫—Ç–∞"
    exit 1
fi
print_success "–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª artisan"

# Check if PHP is available
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ PHP..."
if ! check_command "php"; then
    exit 1
fi

# Check PHP version
PHP_VERSION=$(php -r "echo PHP_VERSION;")
print_success "PHP –Ω–∞–π–¥–µ–Ω (–≤–µ—Ä—Å–∏—è: $PHP_VERSION)"

# Check if Laravel is properly configured
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Laravel..."
if ! check_file ".env"; then
    print_warning "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
fi

if ! check_file "composer.json"; then
    print_error "–§–∞–π–ª composer.json –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi
print_success "Laravel –ø—Ä–æ–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω"

# Check required test files
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è..."
required_files=(
    "DynamicCapTestGenerator.php"
    "DynamicCapTestEngine.php" 
    "DynamicCapCombinationGenerator.php"
    "DynamicCapReportGenerator.php"
    "dynamic_cap_test_runner.php"
    "app/Console/Commands/TestDynamicCapSystem.php"
)

missing_files=0
for file in "${required_files[@]}"; do
    if check_file "$file"; then
        print_success "‚úì $file"
    else
        missing_files=$((missing_files + 1))
    fi
done

if [ $missing_files -gt 0 ]; then
    print_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç $missing_files —Ñ–∞–π–ª(–æ–≤) —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
    print_info "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø—Ä–æ–µ–∫—Ç–µ"
    exit 1
fi

print_success "–í—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã"

echo
print_separator
print_header "üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
print_separator
echo

print_info "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "   üìã –¢–∏–ø: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π"
echo "   üìù –í—ã–≤–æ–¥: –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"
echo "   ‚è∏Ô∏è  –ü–∞—É–∑–∞: –ù–∞ –∫–∞–∂–¥–æ–π –æ—à–∏–±–∫–µ"
echo "   üîÑ –û—á–∏—Å—Ç–∫–∞: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
echo "   ‚è±Ô∏è  –¢–∞–π–º–∞—É—Ç: 30 –º–∏–Ω—É—Ç"

echo
print_warning "–í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è!"
print_info "–°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ 16 —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –∫–∞–ø–∞–º–∏"

echo
print_info "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
echo "  1. –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
echo "  2. –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
echo "  3. –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
echo ""
print_info "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-3) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
read -r test_mode

case "$test_mode" in
    "2")
        echo
        print_info "–†–µ–∂–∏–º: –ë—ã—Å—Ç—Ä–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞"
        TEST_COMMAND="php artisan test:dynamic-cap-system quick --detailed"
        ;;
    "3")
        echo
        print_info "–†–µ–∂–∏–º: –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã"
        TEST_COMMAND="php artisan test:dynamic-cap-system stats --detailed"
        ;;
    *)
        echo
        print_info "–†–µ–∂–∏–º: –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
        TEST_COMMAND="php artisan test:dynamic-cap-system full --detailed --pause-on-error"
        ;;
esac

echo
print_separator
print_header "‚ö° –í–´–ü–û–õ–ù–ï–ù–ò–ï –¢–ï–°–¢–û–í"
print_separator

# Record start time
start_time=$(date +%s)
print_info "–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: $(date)"

echo
print_info "–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞..."

# Test database connection
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö..."
db_test=$(php artisan migrate:status 2>&1)
if [ $? -eq 0 ]; then
    print_success "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞"
else
    print_warning "–ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö:"
    echo "$db_test" | head -5
fi

# Test basic artisan command
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ Laravel..."
php artisan --version > /dev/null 2>&1
if [ $? -eq 0 ]; then
    print_success "Laravel –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å Laravel –∫–æ–º–∞–Ω–¥–∞–º–∏"
    exit 1
fi

# Check if our test command exists
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã test:dynamic-cap-system..."
php artisan list | grep "test:dynamic-cap-system" > /dev/null 2>&1
if [ $? -eq 0 ]; then
    print_success "–ö–æ–º–∞–Ω–¥–∞ test:dynamic-cap-system –Ω–∞–π–¥–µ–Ω–∞"
else
    print_error "–ö–æ–º–∞–Ω–¥–∞ test:dynamic-cap-system –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    print_info "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã test:"
    php artisan list | grep "test:"
    exit 1
fi

# Test with help first
print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã..."
php artisan test:dynamic-cap-system --help > /dev/null 2>&1
if [ $? -eq 0 ]; then
    print_success "–°–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞–µ—Ç"
else
    print_error "–ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å–ø—Ä–∞–≤–∫–æ–π –∫–æ–º–∞–Ω–¥—ã"
    php artisan test:dynamic-cap-system --help
    exit 1
fi

echo
print_info "–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤..."

# Run the tests and capture exit code with better error handling
set -o pipefail
print_info "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: $TEST_COMMAND"
$TEST_COMMAND 2>&1 | tee /tmp/dynamic_cap_test.log
exit_code=${PIPESTATUS[0]}

# Record end time
end_time=$(date +%s)
duration=$((end_time - start_time))

echo
print_separator
print_header "üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø"
print_separator

print_info "–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: $(date)"
print_info "–û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: $duration —Å–µ–∫—É–Ω–¥"

if [ $exit_code -eq 0 ]; then
    print_success "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    print_success "–í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
else
    print_error "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–¥: $exit_code)"
    
    case $exit_code in
        1)
            print_warning "–û–±—â–∞—è –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
            ;;
        255)
            print_warning "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ PHP/Laravel - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"
            ;;
        127)
            print_warning "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
            ;;
        *)
            print_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –∫–æ–¥–æ–º $exit_code"
            ;;
    esac
    
    if [ -f "/tmp/dynamic_cap_test.log" ]; then
        echo
        print_info "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –ª–æ–≥–∞:"
        print_separator
        tail -20 /tmp/dynamic_cap_test.log | while IFS= read -r line; do
            echo "  $line"
        done
        print_separator
        print_info "–ü–æ–ª–Ω—ã–π –ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: /tmp/dynamic_cap_test.log"
    fi
    
    echo
    print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É:"
    echo "  1. php artisan test:dynamic-cap-system --help"
    echo "  2. php artisan migrate:status"
    echo "  3. php artisan config:cache"
    echo "  4. composer dump-autoload"
fi

echo
print_separator
if [ $exit_code -ne 0 ]; then
    print_info "–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É? (y/n)"
    read -r run_diag
    if [[ "$run_diag" =~ ^[Yy]$ ]]; then
        echo
        print_info "–ó–∞–ø—É—Å–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏..."
        print_separator
        echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª–∞—Å—Å–æ–≤:"
        composer dump-autoload -q
        print_success "–ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞"
        
        echo
        echo "üìã –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
        php artisan config:clear
        php artisan cache:clear
        print_success "–ö—ç—à –æ—á–∏—â–µ–Ω"
        
        echo
        echo "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π:"
        php artisan migrate:status | head -10
        
        echo
        print_info "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –µ—â–µ —Ä–∞–∑"
    fi
fi

print_separator
print_info "–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è..."
read -r 