<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\CapUpdateService;
use App\Services\CapAnalysisService;
use App\Models\Cap;
use App\Models\CapHistory;
use App\Models\Message;
use App\Models\Chat;

class TestCapUpdateSystem extends Command
{
    protected $signature = 'test:cap-update-system';
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é aff, brok, geo';

    private $capUpdateService;
    private $capAnalysisService;

    public function __construct(CapUpdateService $capUpdateService, CapAnalysisService $capAnalysisService)
    {
        parent::__construct();
        $this->capUpdateService = $capUpdateService;
        $this->capAnalysisService = $capAnalysisService;
    }

    public function handle()
    {
        $this->info('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø...');
        $this->line('');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        $testChat = $this->createTestChat();
        
        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–ø
        $this->info('üìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–∞–ø');
        $this->testCreateNewCaps($testChat);
        
        // –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–ø
        $this->info('üìù –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–ø');
        $this->testUpdateExistingCaps($testChat);
        
        // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
        $this->info('üìù –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π');
        $this->testCapHistory();
        
        // –¢–µ—Å—Ç 4: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $this->info('üìù –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        $this->testStatistics();
        
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        $this->cleanupTestData();
        
        $this->info('');
        $this->info('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
        
        return Command::SUCCESS;
    }

    private function createTestChat()
    {
        return Chat::firstOrCreate([
            'chat_id' => -1001234567999,
            'type' => 'supergroup',
            'title' => 'Test Cap Update Chat',
            'is_active' => true,
        ]);
    }

    private function testCreateNewCaps($testChat)
    {
        $testMessages = [
            'CAP 50 TestAff - TestBrok : RU,KZ 10-19',
            'CAP 30 AnotherAff - AnotherBrok : DE,FR 24/7',
            'CAP 25 ThirdAff - ThirdBrok : US,CA 09-18',
        ];

        foreach ($testMessages as $index => $messageText) {
            $message = Message::create([
                'chat_id' => $testChat->id,
                'message' => $messageText,
                'user' => 'TestUser',
                'telegram_message_id' => 9990 + $index,
                'telegram_user_id' => 12345,
                'message_type' => 'text'
            ]);

            $result = $this->capUpdateService->processNewMessage($message->id, $messageText);
            
            $this->line("  –°–æ–æ–±—â–µ–Ω–∏–µ: {$messageText}");
            $this->line("  –†–µ–∑—É–ª—å—Ç–∞—Ç: {$result['new_caps']} –Ω–æ–≤—ã—Ö –∫–∞–ø, {$result['updated_caps']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π");
            $this->line('');
        }
    }

    private function testUpdateExistingCaps($testChat)
    {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–ø—ã
        $updateMessages = [
            'CAP 75 TestAff - TestBrok : RU,KZ,BY 12-20', // –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–µ—Ä–≤—É—é –∫–∞–ø—É
            'CAP 40 AnotherAff - AnotherBrok : DE,FR,IT 24/7', // –û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ç–æ—Ä—É—é –∫–∞–ø—É
        ];

        foreach ($updateMessages as $index => $messageText) {
            $message = Message::create([
                'chat_id' => $testChat->id,
                'message' => $messageText,
                'user' => 'UpdateUser',
                'telegram_message_id' => 9995 + $index,
                'telegram_user_id' => 12346,
                'message_type' => 'text'
            ]);

            $result = $this->capUpdateService->processNewMessage($message->id, $messageText);
            
            $this->line("  –°–æ–æ–±—â–µ–Ω–∏–µ: {$messageText}");
            $this->line("  –†–µ–∑—É–ª—å—Ç–∞—Ç: {$result['new_caps']} –Ω–æ–≤—ã—Ö –∫–∞–ø, {$result['updated_caps']} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π");
            
            if ($result['updated_caps'] > 0) {
                $this->info("    ‚úÖ –ö–∞–ø–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!");
            } else {
                $this->warn("    ‚ö†Ô∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ (—Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞–ø–∞)");
            }
            $this->line('');
        }
    }

    private function testCapHistory()
    {
        $caps = Cap::where('affiliate_name', 'LIKE', 'Test%')->get();
        
        foreach ($caps as $cap) {
            $history = CapHistory::getHistoryForCap($cap->id, true);
            
            $this->line("  –ö–∞–ø–∞ #{$cap->id} ({$cap->affiliate_name} - {$cap->broker_name}):");
            $this->line("    –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: " . $history->count());
            
            foreach ($history as $record) {
                $this->line("    - {$record->action_type}: {$record->reason}");
            }
            $this->line('');
        }
    }

    private function testStatistics()
    {
        $stats = $this->capUpdateService->getUpdateStatistics();
        
        $this->line("  –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        $this->line("    –í—Å–µ–≥–æ –∫–∞–ø: {$stats['total_caps']}");
        $this->line("    –ó–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏: {$stats['total_history_records']}");
        $this->line("    –û–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {$stats['updates_today']}");
        $this->line("    –ù–æ–≤—ã—Ö –∫–∞–ø —Å–µ–≥–æ–¥–Ω—è: {$stats['new_caps_today']}");
        $this->line("    –°–∫—Ä—ã—Ç—ã—Ö –∑–∞–ø–∏—Å–µ–π: {$stats['hidden_records']}");
        $this->line("    –í–∏–¥–∏–º—ã—Ö –∑–∞–ø–∏—Å–µ–π: {$stats['visible_records']}");
        $this->line('');
        
        // –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        $duplicates = $this->capUpdateService->findPotentialDuplicates();
        $this->line("  –ù–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: " . count($duplicates));
        
        foreach ($duplicates as $duplicate) {
            $original = $duplicate['original'];
            $dup = $duplicate['duplicate'];
            $this->warn("    –î—É–±–ª–∏–∫–∞—Ç: #{$original->id} –∏ #{$dup->id} ({$original->affiliate_name} - {$original->broker_name})");
        }
    }

    private function cleanupTestData()
    {
        $this->info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–ø—ã (–∏—Å—Ç–æ—Ä–∏—è —É–¥–∞–ª–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ CASCADE)
        $testCaps = Cap::whereHas('message', function($q) {
            $q->where('user', 'LIKE', '%TestUser%')
              ->orWhere('user', 'LIKE', '%UpdateUser%');
        })->get();
        
        foreach ($testCaps as $cap) {
            $cap->delete();
        }
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message::where('user', 'LIKE', '%TestUser%')
               ->orWhere('user', 'LIKE', '%UpdateUser%')
               ->delete();
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        Chat::where('title', 'Test Cap Update Chat')->delete();
        
        $this->line('–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã');
    }
} 