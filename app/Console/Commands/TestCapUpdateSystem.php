<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Message;
use App\Models\Chat;
use App\Models\Cap;
use App\Models\CapHistory;
use App\Services\CapAnalysisService;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\DB;

class TestCapUpdateSystem extends Command
{
    protected $signature = 'test:cap-update-system';
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –∞—Ñ—Ñ–∏–ª–µ–π—Ç-–±—Ä–æ–∫–µ—Ä-–≥–µ–æ';

    public function handle()
    {
        $this->info('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–∞–±–ª–∏—Ü—ã cap_history
        if (!Schema::hasTable('cap_history')) {
            $this->info('üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã cap_history...');
            
            try {
                DB::statement('
                    CREATE TABLE cap_history (
                        id BIGINT UNSIGNED NOT NULL AUTO_INCREMENT PRIMARY KEY,
                        cap_id BIGINT UNSIGNED NOT NULL,
                        source_message_id BIGINT UNSIGNED NOT NULL,
                        target_message_id BIGINT UNSIGNED NOT NULL,
                        match_key VARCHAR(255) NOT NULL,
                        old_values JSON NULL,
                        new_values JSON NULL,
                        changed_fields JSON NULL,
                        action VARCHAR(50) NOT NULL DEFAULT "updated",
                        created_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
                        INDEX idx_cap_id (cap_id),
                        INDEX idx_source_message_id (source_message_id),
                        INDEX idx_target_message_id (target_message_id),
                        INDEX idx_match_key (match_key),
                        INDEX idx_cap_id_created_at (cap_id, created_at),
                        FOREIGN KEY (cap_id) REFERENCES caps(id) ON DELETE CASCADE,
                        FOREIGN KEY (source_message_id) REFERENCES messages(id) ON DELETE CASCADE,
                        FOREIGN KEY (target_message_id) REFERENCES messages(id) ON DELETE CASCADE
                    )
                ');
                
                $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cap_history —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
            } catch (\Exception $e) {
                $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã: ' . $e->getMessage());
                return Command::FAILURE;
            }
        } else {
            $this->info('‚úÖ –¢–∞–±–ª–∏—Ü–∞ cap_history —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        $chat = Chat::firstOrCreate([
            'chat_id' => -888888,
            'type' => 'supergroup',
            'title' => '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø'
        ]);
        
        $this->info('üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...');
        
        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
        $message1 = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 30 TestAff - TestBroker : RU/KZ' . PHP_EOL . '10-19' . PHP_EOL . '15.12',
            'user' => 'TestUser1',
            'telegram_message_id' => 2001,
            'telegram_user_id' => 2001,
            'created_at' => now()
        ]);
        
        $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {$message1->id}");
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        $capAnalysisService = new CapAnalysisService();
        $result1 = $capAnalysisService->analyzeAndSaveCapMessage($message1->id, $message1->message);
        
        $this->info("üìä –ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {$result1['cap_entries_count']} –∫–∞–ø –Ω–∞–π–¥–µ–Ω–æ");
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞–ø—É
        $cap1 = Cap::where('message_id', $message1->id)->first();
        
        if (!$cap1) {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞–ø—É');
            return Command::FAILURE;
        }
        
        $this->info("‚úÖ –ü–µ—Ä–≤–∞—è –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {$cap1->id}");
        $this->info("   - –ê—Ñ—Ñ–∏–ª–µ–π—Ç: {$cap1->affiliate_name}");
        $this->info("   - –ë—Ä–æ–∫–µ—Ä: {$cap1->broker_name}");
        $this->info("   - –ì–µ–æ: " . implode(', ', $cap1->geos ?? []));
        $this->info("   - –ö–∞–ø–∞: " . implode(', ', $cap1->cap_amounts ?? []));
        $this->info("   - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {$cap1->schedule}");
        $this->info("   - –î–∞—Ç–∞: {$cap1->date}");
        
        // –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º –∂–µ –∞—Ñ—Ñ–∏–ª–µ–π—Ç-–±—Ä–æ–∫–µ—Ä-–≥–µ–æ, –Ω–æ –¥—Ä—É–≥–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        $message2 = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 50 TestAff - TestBroker : RU/KZ' . PHP_EOL . '24/7' . PHP_EOL . '20.12',
            'user' => 'TestUser2',
            'telegram_message_id' => 2002,
            'telegram_user_id' => 2002,
            'created_at' => now()->addMinutes(5)
        ]);
        
        $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–æ –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {$message2->id}");
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–≤—É—é –∫–∞–ø—É)
        $result2 = $capAnalysisService->analyzeAndSaveCapMessage($message2->id, $message2->message);
        
        $this->info("üìä –ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:");
        $this->info("   - –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$result2['created_caps']}");
        $this->info("   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: {$result2['updated_caps']}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∫–∞–ø—ã
        $cap1->refresh();
        
        $this->info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∫–∞–ø—ã:");
        $this->info("   - –ù–æ–≤–∞—è –∫–∞–ø–∞: " . implode(', ', $cap1->cap_amounts ?? []));
        $this->info("   - –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {$cap1->schedule}");
        $this->info("   - –ù–æ–≤–∞—è –¥–∞—Ç–∞: {$cap1->date}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π
        $history = CapHistory::where('cap_id', $cap1->id)->get();
        
        $this->info("üìú –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:");
        if ($history->count() > 0) {
            foreach ($history as $entry) {
                $this->info("   - {$entry->action} –≤ {$entry->created_at}");
                $this->info("     –ò–∑–º–µ–Ω–µ–Ω—ã –ø–æ–ª—è: " . implode(', ', $entry->changed_fields ?? []));
            }
        } else {
            $this->info("   - –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞");
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏–º –∞—Ñ—Ñ–∏–ª–µ–π—Ç-–±—Ä–æ–∫–µ—Ä-–≥–µ–æ
        $message3 = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 25 OtherAff - OtherBroker : US/CA' . PHP_EOL . '08-20',
            'user' => 'TestUser3',
            'telegram_message_id' => 2003,
            'telegram_user_id' => 2003,
            'created_at' => now()->addMinutes(10)
        ]);
        
        $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {$message3->id}");
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ–ª–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–∞–ø—É, –Ω–µ –æ–±–Ω–æ–≤–ª—è—è —Å—Ç–∞—Ä—É—é)
        $result3 = $capAnalysisService->analyzeAndSaveCapMessage($message3->id, $message3->message);
        
        $this->info("üìä –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:");
        $this->info("   - –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$result3['created_caps']}");
        $this->info("   - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: {$result3['updated_caps']}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø
        $totalCaps = Cap::count();
        $this->info("üìã –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø –≤ —Å–∏—Å—Ç–µ–º–µ: {$totalCaps}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∫–∞–ø
        $totalHistory = CapHistory::count();
        $this->info("üìú –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {$totalHistory}");
        
        $this->info('');
        $this->info('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
        $this->info('');
        $this->info('–°–≤–æ–¥–∫–∞:');
        $this->info("- –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: 3");
        $this->info("- –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$totalCaps}");
        $this->info("- –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {$totalHistory}");
        $this->info("- –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é: {$result2['updated_caps']}");
        
        return Command::SUCCESS;
    }
} 