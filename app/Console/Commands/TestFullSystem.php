<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Message;
use App\Models\Chat;
use App\Models\Cap;
use App\Services\CapAnalysisService;

class TestFullSystem extends Command
{
    protected $signature = 'test:full-system';
    protected $description = '–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è';

    public function handle()
    {
        $this->info('üß™ –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã cap analysis...');
        $this->info('–¢–µ—Å—Ç–∏—Ä—É–µ—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ reply, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–º, –ø—Ä–æ–ø—É—Å–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤');
        $this->info('');

        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        $chat = Chat::updateOrCreate(
            ['chat_id' => -1001000000001],
            [
                'type' => 'supergroup',
                'title' => 'Test Full System Chat',
                'is_active' => true,
            ]
        );

        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        Message::where('chat_id', $chat->id)->delete();
        Cap::whereIn('message_id', function($query) use ($chat) {
            $query->select('id')->from('messages')->where('chat_id', $chat->id);
        })->delete();

        $capAnalysisService = new CapAnalysisService();
        
        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã
        $this->info('üìã –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã');
        $message1 = Message::create([
            'chat_id' => $chat->id,
            'message' => "Affiliate: TestAff1\nRecipient: TestBroker1\nCap: 30\nGeo: RU\nSchedule: 24/7",
            'user' => 'TestUser',
            'telegram_message_id' => 1001,
            'telegram_user_id' => 123456,
            'created_at' => now(),
        ]);

        $result1 = $capAnalysisService->analyzeAndSaveCapMessage($message1->id, $message1->message);
        
        if ($result1['cap_entries_count'] === 1) {
            $this->info('‚úÖ –ö–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—ã');
            return Command::FAILURE;
        }

        // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å—Å—è)
        $this->info('üìã –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–∞ (–¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å—Å—è)');
        $message2 = Message::create([
            'chat_id' => $chat->id,
            'message' => "Affiliate: TestAff1\nRecipient: TestBroker1\nCap: 50\nGeo: RU\nSchedule: 10-18",
            'user' => 'TestUser',
            'telegram_message_id' => 1002,
            'telegram_user_id' => 123456,
            'created_at' => now(),
        ]);

        $result2 = $capAnalysisService->analyzeAndSaveCapMessage($message2->id, $message2->message);
        
        if ($result2['cap_entries_count'] === 0 && ($result2['updated_entries_count'] ?? 0) === 0) {
            $this->info('‚úÖ –î—É–±–ª–∏–∫–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ–ø—É—â–µ–Ω');
        } else {
            $this->error('‚ùå –î—É–±–ª–∏–∫–∞—Ç –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω (—Å–æ–∑–¥–∞–Ω–æ: ' . $result2['cap_entries_count'] . ', –æ–±–Ω–æ–≤–ª–µ–Ω–æ: ' . ($result2['updated_entries_count'] ?? 0) . ')');
            return Command::FAILURE;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –ë–î –≤—Å–µ –µ—â–µ –æ–¥–Ω–∞ –∫–∞–ø–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        $cap = Cap::where('affiliate_name', 'TestAff1')
                  ->where('recipient_name', 'TestBroker1')
                  ->where('geo', 'RU')
                  ->first();

        if ($cap && $cap->cap_amount === 30) {
            $this->info('‚úÖ –î–∞–Ω–Ω—ã–µ –∫–∞–ø—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å (cap_amount = 30)');
        } else {
            $this->error('‚ùå –î–∞–Ω–Ω—ã–µ –∫–∞–ø—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ');
            return Command::FAILURE;
        }

        // –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply_to_message
        $this->info('üìã –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply_to_message');
        $message3 = Message::create([
            'chat_id' => $chat->id,
            'message' => "Cap: 75\nGeo: RU",
            'user' => 'TestUser',
            'telegram_message_id' => 1003,
            'telegram_user_id' => 123456,
            'reply_to_message_id' => $message1->id,
            'created_at' => now(),
        ]);

        $result3 = $capAnalysisService->analyzeAndSaveCapMessage($message3->id, $message3->message);
        
        if (($result3['updated_entries_count'] ?? 0) === 1) {
            $this->info('‚úÖ –ö–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ reply');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ reply');
            return Command::FAILURE;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
        $cap->refresh();
        if ($cap->cap_amount === 75) {
            $this->info('‚úÖ Cap amount –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ 75');
        } else {
            $this->error('‚ùå Cap amount –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è');
            return Command::FAILURE;
        }

        // –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ø—ã —Å –Ω–æ–≤—ã–º –≥–µ–æ
        $this->info('üìã –¢–µ—Å—Ç 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–ø—ã —Å –Ω–æ–≤—ã–º –≥–µ–æ');
        $message4 = Message::create([
            'chat_id' => $chat->id,
            'message' => "Affiliate: TestAff1\nRecipient: TestBroker1\nCap: 25\nGeo: DE\nSchedule: 24/7",
            'user' => 'TestUser',
            'telegram_message_id' => 1004,
            'telegram_user_id' => 123456,
            'created_at' => now(),
        ]);

        $result4 = $capAnalysisService->analyzeAndSaveCapMessage($message4->id, $message4->message);
        
        if ($result4['cap_entries_count'] === 1) {
            $this->info('‚úÖ –ö–∞–ø–∞ —Å –Ω–æ–≤—ã–º –≥–µ–æ —Å–æ–∑–¥–∞–Ω–∞');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—ã —Å –Ω–æ–≤—ã–º –≥–µ–æ');
            return Command::FAILURE;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–µ–ø–µ—Ä—å –≤ –ë–î 2 –∫–∞–ø—ã
        $capsCount = Cap::where('affiliate_name', 'TestAff1')
                        ->where('recipient_name', 'TestBroker1')
                        ->count();

        if ($capsCount === 2) {
            $this->info('‚úÖ –í –ë–î —Ç–µ–ø–µ—Ä—å 2 –∫–∞–ø—ã (RU –∏ DE)');
        } else {
            $this->error('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø –≤ –ë–î: ' . $capsCount);
            return Command::FAILURE;
        }

        // –¢–µ—Å—Ç 5: –ö–æ–º–∞–Ω–¥–∞ STOP —á–µ—Ä–µ–∑ reply
        $this->info('üìã –¢–µ—Å—Ç 5: –ö–æ–º–∞–Ω–¥–∞ STOP —á–µ—Ä–µ–∑ reply');
        $message5 = Message::create([
            'chat_id' => $chat->id,
            'message' => "STOP",
            'user' => 'TestUser',
            'telegram_message_id' => 1005,
            'telegram_user_id' => 123456,
            'reply_to_message_id' => $message1->id,
            'created_at' => now(),
        ]);

        $result5 = $capAnalysisService->analyzeAndSaveCapMessage($message5->id, $message5->message);
        
        if (($result5['updated_entries_count'] ?? 0) === 1) {
            $this->info('‚úÖ –ö–æ–º–∞–Ω–¥–∞ STOP –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã STOP');
            return Command::FAILURE;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        $cap->refresh();
        if ($cap->status === 'STOP') {
            $this->info('‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ STOP');
        } else {
            $this->error('‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
            return Command::FAILURE;
        }

        // –¢–µ—Å—Ç 6: –ö–æ–º–∞–Ω–¥–∞ RUN —á–µ—Ä–µ–∑ reply
        $this->info('üìã –¢–µ—Å—Ç 6: –ö–æ–º–∞–Ω–¥–∞ RUN —á–µ—Ä–µ–∑ reply');
        $message6 = Message::create([
            'chat_id' => $chat->id,
            'message' => "RUN",
            'user' => 'TestUser',
            'telegram_message_id' => 1006,
            'telegram_user_id' => 123456,
            'reply_to_message_id' => $message1->id,
            'created_at' => now(),
        ]);

        $result6 = $capAnalysisService->analyzeAndSaveCapMessage($message6->id, $message6->message);
        
        if (($result6['updated_entries_count'] ?? 0) === 1) {
            $this->info('‚úÖ –ö–æ–º–∞–Ω–¥–∞ RUN –≤—ã–ø–æ–ª–Ω–µ–Ω–∞');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã RUN');
            return Command::FAILURE;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        $cap->refresh();
        if ($cap->status === 'RUN') {
            $this->info('‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RUN');
        } else {
            $this->error('‚ùå –°—Ç–∞—Ç—É—Å –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è');
            return Command::FAILURE;
        }

        // –¢–µ—Å—Ç 7: –ú—É–ª—å—Ç–∏–∫–∞–ø–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–ø –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
        $this->info('üìã –¢–µ—Å—Ç 7: –ú—É–ª—å—Ç–∏–∫–∞–ø–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–ø –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)');
        $message7 = Message::create([
            'chat_id' => $chat->id,
            'message' => "Affiliate: MultiAff\nRecipient: MultiBroker\nCap: 20 30\nGeo: FR IT\nSchedule: 24/7",
            'user' => 'TestUser',
            'telegram_message_id' => 1007,
            'telegram_user_id' => 123456,
            'created_at' => now(),
        ]);

        $result7 = $capAnalysisService->analyzeAndSaveCapMessage($message7->id, $message7->message);
        
        if ($result7['cap_entries_count'] === 2) {
            $this->info('‚úÖ –ú—É–ª—å—Ç–∏–∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ (2 –∑–∞–ø–∏—Å–∏)');
        } else {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏–∫–∞–ø—ã (—Å–æ–∑–¥–∞–Ω–æ: ' . $result7['cap_entries_count'] . ')');
            return Command::FAILURE;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∏ —Å–æ–∑–¥–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        $frCap = Cap::where('affiliate_name', 'MultiAff')->where('geo', 'FR')->first();
        $itCap = Cap::where('affiliate_name', 'MultiAff')->where('geo', 'IT')->first();

        if ($frCap && $frCap->cap_amount === 20 && $itCap && $itCap->cap_amount === 30) {
            $this->info('‚úÖ –ú—É–ª—å—Ç–∏–∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ (FR: 20, IT: 30)');
        } else {
            $this->error('‚ùå –ú—É–ª—å—Ç–∏–∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
            return Command::FAILURE;
        }

        // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        $this->info('');
        $this->info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        $this->info('');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î
        $allCaps = Cap::all();
        $this->info('üìä –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:');
        foreach ($allCaps as $cap) {
            $this->info("  - {$cap->affiliate_name} ‚Üí {$cap->recipient_name} ({$cap->geo}, {$cap->cap_amount}) [{$cap->status}]");
        }
        $this->info("  –í—Å–µ–≥–æ –∫–∞–ø: {$allCaps->count()}");

        return Command::SUCCESS;
    }
} 