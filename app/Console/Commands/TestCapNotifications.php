<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Message;
use App\Models\Chat;
use App\Models\Cap;
use App\Services\CapAnalysisService;
use App\Services\CapNotificationService;

class TestCapNotifications extends Command
{
    protected $signature = 'test:cap-notifications {--disable-notifications : –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞}';
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–ø–∞—Ö –≤ Telegram';

    public function handle()
    {
        $this->info('üîî –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–ø–∞—Ö...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        $botToken = config('telegram.bot_token');
        $notificationsEnabled = config('telegram.cap_notifications.enabled', true);
        $adminChatId = config('telegram.cap_notifications.admin_chat_id');
        
        if ($this->option('disable-notifications')) {
            $this->info('‚ö†Ô∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∞');
            $notificationsEnabled = false;
        }
        
        $this->info('üìã –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:');
        $this->info("  - Bot Token: " . ($botToken ? '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($notificationsEnabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->info("  - –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: " . ($adminChatId ? $adminChatId : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'));
        $this->line('');
        
        if (!$botToken) {
            $this->error('‚ùå Bot token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN –≤ .env —Ñ–∞–π–ª–µ');
            return Command::FAILURE;
        }
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        $chat = Chat::firstOrCreate([
            'chat_id' => -777777,
            'type' => 'supergroup',
            'title' => '–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'
        ]);
        
        $this->info("üì± –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç: {$chat->title} (ID: {$chat->chat_id})");
        $this->line('');
        
        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã
        $this->info('üß™ –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã...');
        
        $message1 = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 25 TestNotif - TestBroker : RU/KZ' . PHP_EOL . '09-18' . PHP_EOL . '25.12',
            'user' => 'TestNotificationUser',
            'telegram_message_id' => 3001,
            'telegram_user_id' => 3001,
            'created_at' => now()
        ]);
        
                 $capAnalysisService = new CapAnalysisService();
         
         if (!$notificationsEnabled) {
             $capAnalysisService->notificationService->setEnabled(false);
         }
        
        $result1 = $capAnalysisService->analyzeAndSaveCapMessage($message1->id, $message1->message);
        
        $this->info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–∑–¥–∞–Ω–∏—è:");
        $this->info("  - –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$result1['created_caps']}");
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($result1['notifications_sent'] ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->line('');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞–ø—É
        $cap1 = Cap::where('message_id', $message1->id)->first();
        
        if (!$cap1) {
            $this->error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–∞–ø—É');
            return Command::FAILURE;
        }
        
        // –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞–ø—ã
        $this->info('üß™ –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∫–∞–ø—ã...');
        
        $message2 = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 35 TestNotif - TestBroker : RU/KZ' . PHP_EOL . '24/7' . PHP_EOL . '31.12',
            'user' => 'TestUpdateUser',
            'telegram_message_id' => 3002,
            'telegram_user_id' => 3002,
            'created_at' => now()->addMinutes(1)
        ]);
        
        $result2 = $capAnalysisService->analyzeAndSaveCapMessage($message2->id, $message2->message);
        
        $this->info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
        $this->info("  - –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$result2['created_caps']}");
        $this->info("  - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: {$result2['updated_caps']}");
        $this->info("  - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: " . ($result2['unchanged_caps'] ?? 0));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($result2['notifications_sent'] ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->line('');
        
        // –¢–µ—Å—Ç 3: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–ø —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
        $this->info('üß™ –¢–µ—Å—Ç 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –º–∞—Å—Å–æ–≤–æ–º—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é...');
        
        // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ø—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $additionalMessages = [];
        for ($i = 1; $i <= 3; $i++) {
            $msg = Message::create([
                'chat_id' => $chat->id,
                'message' => "CAP 20 BulkTest{$i} - BulkBroker : US/CA" . PHP_EOL . '10-20',
                'user' => "BulkUser{$i}",
                'telegram_message_id' => 3010 + $i,
                'telegram_user_id' => 3010 + $i,
                'created_at' => now()->addMinutes(2 + $i)
            ]);
            
            $capAnalysisService->analyzeAndSaveCapMessage($msg->id, $msg->message);
            $additionalMessages[] = $msg;
        }
        
        $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–æ 3 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        
        // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–ª–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ —ç—Ç–∏ –∫–∞–ø—ã
        $this->info('üß™ –¢–µ—Å—Ç 4: –ú–∞—Å—Å–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (3+ –∫–∞–ø)...');
        
        $bulkUpdateMessage = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 40 BulkTest1 - BulkBroker : US/CA' . PHP_EOL . 
                        'CAP 40 BulkTest2 - BulkBroker : US/CA' . PHP_EOL . 
                        'CAP 40 BulkTest3 - BulkBroker : US/CA' . PHP_EOL . 
                        '24/7' . PHP_EOL . '01.01',
            'user' => 'BulkUpdateUser',
            'telegram_message_id' => 3020,
            'telegram_user_id' => 3020,
            'created_at' => now()->addMinutes(10)
        ]);
        
        $bulkResult = $capAnalysisService->analyzeAndSaveCapMessage($bulkUpdateMessage->id, $bulkUpdateMessage->message);
        
        $this->info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:");
        $this->info("  - –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$bulkResult['created_caps']}");
        $this->info("  - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: {$bulkResult['updated_caps']}");
        $this->info("  - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: " . ($bulkResult['unchanged_caps'] ?? 0));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($bulkResult['notifications_sent'] ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–≥—Ä—É–ø–ø–æ–≤–æ–µ)' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->line('');
        
        // –¢–µ—Å—Ç 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        $this->info('üß™ –¢–µ—Å—Ç 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)...');
        
        $identicalMessage = Message::create([
            'chat_id' => $chat->id,
            'message' => 'CAP 35 TestNotif - TestBroker : RU/KZ' . PHP_EOL . '24/7' . PHP_EOL . '31.12',
            'user' => 'TestUnchangedUser',
            'telegram_message_id' => 3030,
            'telegram_user_id' => 3030,
            'created_at' => now()->addMinutes(15)
        ]);
        
        $unchangedResult = $capAnalysisService->analyzeAndSaveCapMessage($identicalMessage->id, $identicalMessage->message);
        
        $this->info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
        $this->info("  - –°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: {$unchangedResult['created_caps']}");
        $this->info("  - –û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: {$unchangedResult['updated_caps']}");
        $this->info("  - –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: " . ($unchangedResult['unchanged_caps'] ?? 0));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($unchangedResult['notifications_sent'] ? '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' : '–û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->line('');
        
        // –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–∞–ø—Ä—è–º—É—é
        if ($notificationsEnabled) {
            $this->info('üß™ –¢–µ—Å—Ç 6: –ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è...');
            
            $notificationService = new CapNotificationService();
            $testResult = $notificationService->sendNewCapNotification($cap1, $message1);
            
            $this->info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: " . ($testResult ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞'));
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        $this->line('');
        $this->info('üìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
        $totalCaps = Cap::count();
        $totalMessages = Message::where('chat_id', $chat->id)->count();
        
        $this->info("  - –í—Å–µ–≥–æ –∫–∞–ø –≤ —Å–∏—Å—Ç–µ–º–µ: {$totalCaps}");
        $this->info("  - –¢–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {$totalMessages}");
        $this->info("  - –ß–∞—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {$chat->chat_id}");
        
        $this->line('');
        $this->info('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        $this->line('');
        
        if ($notificationsEnabled) {
            $this->info('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram —á–∞—Ç –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
            $this->info("   - –û—Å–Ω–æ–≤–Ω–æ–π —á–∞—Ç: {$chat->chat_id}");
            if ($adminChatId) {
                $this->info("   - –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: {$adminChatId}");
            }
        } else {
            $this->info('üí° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—ã–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞');
        }
        
        return Command::SUCCESS;
    }
} 