<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Chat;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;

class CreateTestChats extends Command
{
    protected $signature = 'test:create-chats {count=100 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è}';
    protected $description = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö';

    public function handle()
    {
        $count = (int) $this->argument('count');
        
        $this->info("–°–æ–∑–¥–∞–Ω–∏–µ {$count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤...");
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º foreign key constraints
        $this->warn('–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        DB::statement('SET FOREIGN_KEY_CHECKS=0;');
        DB::table('caps_history')->truncate();
        DB::table('caps')->truncate();
        DB::table('messages')->truncate();
        DB::table('chats')->truncate();
        DB::statement('SET FOREIGN_KEY_CHECKS=1;');
        
        $this->info('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —á–∞—Ç–æ–≤...');
        
        $chats = [];
        $now = Carbon::now();
        
        for ($i = 1; $i <= $count; $i++) {
            $chatTypes = ['private', 'group', 'supergroup', 'channel'];
            $type = $chatTypes[array_rand($chatTypes)];
            
            $chat = [
                'chat_id' => 1000 + $i, // –ù–∞—á–∏–Ω–∞–µ–º —Å 1001
                'type' => $type,
                'title' => $this->generateChatTitle($type, $i),
                'username' => $this->generateUsername($type, $i),
                'description' => $this->generateDescription($type, $i),
                'is_active' => true,
                'last_message_at' => $now->copy()->subMinutes(rand(0, 1440)), // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
                'message_count' => rand(0, 1000),
                'display_order' => $i <= 10 ? $i : 0, // –ü–µ—Ä–≤—ã–µ 10 —á–∞—Ç–æ–≤ –≤ —Ç–æ–ø–µ
                'display_name' => null, // –ë—É–¥–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                'created_at' => $now,
                'updated_at' => $now,
            ];
            
            $chats[] = $chat;
        }
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Ç—ã –æ–¥–Ω–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
        Chat::insert($chats);
        
        $this->info("‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ {$count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤");
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $this->showStatistics();
    }

    private function generateChatTitle($type, $index)
    {
        switch ($type) {
            case 'private':
                return null; // –£ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤ –Ω–µ—Ç title
            case 'group':
                return "–ì—Ä—É–ø–ø–∞ #{$index}";
            case 'supergroup':
                return "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ #{$index}";
            case 'channel':
                return "–ö–∞–Ω–∞–ª #{$index}";
            default:
                return "–ß–∞—Ç #{$index}";
        }
    }

    private function generateUsername($type, $index)
    {
        switch ($type) {
            case 'private':
                return "user_{$index}";
            case 'group':
                return null; // –£ –≥—Ä—É–ø–ø –æ–±—ã—á–Ω–æ –Ω–µ—Ç username
            case 'supergroup':
                return rand(0, 1) ? "supergroup_{$index}" : null;
            case 'channel':
                return "channel_{$index}";
            default:
                return "user_{$index}";
        }
    }

    private function generateDescription($type, $index)
    {
        switch ($type) {
            case 'private':
                return "–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º #{$index}";
            case 'group':
                return "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ #{$index} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã";
            case 'supergroup':
                return "–¢–µ—Å—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ #{$index} —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏";
            case 'channel':
                return "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª #{$index} –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π";
            default:
                return "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç #{$index}";
        }
    }

    private function showStatistics()
    {
        $this->info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:");
        
        $types = Chat::selectRaw('type, COUNT(*) as count')
                     ->groupBy('type')
                     ->pluck('count', 'type')
                     ->toArray();
        
        foreach ($types as $type => $count) {
            $this->line("  - {$type}: {$count}");
        }
        
        $topTenCount = Chat::where('display_order', '>', 0)->count();
        $this->line("  - –í —Ç–æ–ø-10: {$topTenCount}");
        
        $this->info("\nüéØ –ß–∞—Ç—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!");
    }
} 