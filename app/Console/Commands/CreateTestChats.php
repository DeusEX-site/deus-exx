<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Chat;
use App\Models\Message;
use App\Models\Cap;
use App\Models\CapHistory;
use App\Http\Controllers\TelegramWebhookController;
use Carbon\Carbon;
use Illuminate\Support\Facades\DB;
use Illuminate\Http\Request;

class CreateTestChats extends Command
{
    protected $signature = 'test:create-chats {count=100 : –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è}';
    protected $description = '–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —á–∞—Ç—ã –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É —Å–∏—Å—Ç–µ–º—ã';

    public function handle()
    {
        $count = (int) $this->argument('count');
        
        $this->info("–°–æ–∑–¥–∞–Ω–∏–µ {$count} —Ç–µ—Å—Ç–æ–≤—ã—Ö —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É...");
        
        // –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        $this->warn('–û—á–∏—Å—Ç–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');
        $this->clearDatabase();
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        $webhookController = app(TelegramWebhookController::class);
        
        $this->info('–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ webhook...');
        
        $successCount = 0;
        $errorCount = 0;
        
        for ($i = 1; $i <= $count; $i++) {
            try {
                // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
                $testMessage = $this->generateTestMessage($i);
                
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ webhook –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
                $request = new Request($testMessage);
                $response = $webhookController->handle($request);
                
                if ($response->getStatusCode() == 200) {
                    $successCount++;
                    if ($i % 10 == 0) {
                        $this->info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞—Ç–æ–≤: {$i}");
                    }
                } else {
                    $errorCount++;
                    $this->error("–û—à–∏–±–∫–∞ –¥–ª—è —á–∞—Ç–∞ {$i}: " . $response->getContent());
                }
                
                // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                usleep(10000); // 0.01 —Å–µ–∫—É–Ω–¥—ã
                
            } catch (\Exception $e) {
                $errorCount++;
                $this->error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {$i}: " . $e->getMessage());
            }
        }
        
        $this->info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$successCount}");
        if ($errorCount > 0) {
            $this->warn("‚ö†Ô∏è –û—à–∏–±–æ–∫: {$errorCount}");
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        $this->showStatistics();
    }

    private function clearDatabase()
    {
        DB::statement('SET FOREIGN_KEY_CHECKS=0;');
        DB::table('caps_history')->truncate();
        DB::table('caps')->truncate();  
        DB::table('messages')->truncate();
        DB::table('chats')->truncate();
        DB::statement('SET FOREIGN_KEY_CHECKS=1;');
        
        $this->info('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞');
    }

    private function generateTestMessage($index)
    {
        $chatTypes = ['private', 'group', 'supergroup', 'channel'];
        $chatType = $chatTypes[array_rand($chatTypes)];
        
        $chatId = 1000 + $index;
        $messageId = 10000 + $index;
        $userId = 2000 + $index;
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        $messageTexts = [
            "CAP {$index} TestAff{$index} - TestBroker{$index} : US/CA\n10-19",
            "CAP " . (20 + $index) . " Partner{$index} - Broker{$index} : EU/UK\n24/7",
            "CAP " . (30 + $index) . " Affiliate{$index} - Recipient{$index} : RU/KZ\n14.05",
            "–û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –Ω–æ–º–µ—Ä {$index}",
            "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã {$index}",
            "CAP " . (40 + $index) . " TestPartner{$index} - TestRecipient{$index} : AU/NZ\n09-18",
        ];
        
        $messageText = $messageTexts[$index % count($messageTexts)];
        
        // –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram API
        return [
            'update_id' => $index,
            'message' => [
                'message_id' => $messageId,
                'from' => [
                    'id' => $userId,
                    'is_bot' => false,
                    'first_name' => "TestUser{$index}",
                    'last_name' => "LastName{$index}",
                    'username' => "testuser{$index}",
                    'language_code' => 'ru'
                ],
                'chat' => [
                    'id' => $chatId,
                    'type' => $chatType,
                    'title' => $this->generateChatTitle($chatType, $index),
                    'username' => $this->generateChatUsername($chatType, $index),
                    'description' => $this->generateChatDescription($chatType, $index)
                ],
                'date' => Carbon::now()->subMinutes(rand(0, 1440))->timestamp,
                'text' => $messageText
            ]
        ];
    }

    private function generateChatTitle($type, $index)
    {
        switch ($type) {
            case 'private':
                return null;
            case 'group':
                return "–ì—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #{$index}";
            case 'supergroup':
                return "–°—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #{$index}";
            case 'channel':
                return "–ö–∞–Ω–∞–ª —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è #{$index}";
            default:
                return "–ß–∞—Ç #{$index}";
        }
    }

    private function generateChatUsername($type, $index)
    {
        switch ($type) {
            case 'private':
                return "testuser{$index}";
            case 'group':
                return null;
            case 'supergroup':
                return rand(0, 1) ? "testgroup{$index}" : null;
            case 'channel':
                return "testchannel{$index}";
            default:
                return "testuser{$index}";
        }
    }

    private function generateChatDescription($type, $index)
    {
        switch ($type) {
            case 'private':
                return null;
            case 'group':
                return "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã #{$index}";
            case 'supergroup':
                return "–¢–µ—Å—Ç–æ–≤–∞—è —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ #{$index}";
            case 'channel':
                return "–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π #{$index}";
            default:
                return "–¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç #{$index}";
        }
    }

    private function showStatistics()
    {
        $this->info("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:");
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤
        $chatCount = Chat::count();
        $this->line("üìÅ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {$chatCount}");
        
        $chatTypes = Chat::selectRaw('type, COUNT(*) as count')
                     ->groupBy('type')
                     ->pluck('count', 'type')
                     ->toArray();
        
        foreach ($chatTypes as $type => $count) {
            $this->line("  - {$type}: {$count}");
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        $messageCount = Message::count();
        $this->line("üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {$messageCount}");
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–ø
        $capCount = Cap::count();
        $this->line("üéØ –í—Å–µ–≥–æ –∫–∞–ø: {$capCount}");
        
        if ($capCount > 0) {
            $capsByGeo = Cap::selectRaw('geos, COUNT(*) as count')
                          ->groupBy('geos')
                          ->pluck('count', 'geos')
                          ->toArray();
            
            $this->line("üìç –ö–∞–ø—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º:");
            foreach (array_slice($capsByGeo, 0, 5) as $geo => $count) {
                $this->line("  - {$geo}: {$count}");
            }
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø
        $capHistoryCount = CapHistory::count();
        $this->line("üìö –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø: {$capHistoryCount}");
        
        $this->info("\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!");
        $this->info("‚úÖ –ß–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã —á–µ—Ä–µ–∑ TelegramWebhookController");
        $this->info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã —á–µ—Ä–µ–∑ CapAnalysisService");
        $this->info("‚úÖ –ö–∞–ø—ã –Ω–∞–π–¥–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏");
    }
} 