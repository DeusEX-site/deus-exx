<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\CapAnalysisService;
use App\Models\Message;
use App\Models\Chat;
use App\Models\Cap;
use App\Models\CapHistory;

class TestCapHistorySystem extends Command
{
    protected $signature = 'test:cap-history {--clear : –û—á–∏—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ}';
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏';

    private $capAnalysisService;

    public function __construct(CapAnalysisService $capAnalysisService)
    {
        parent::__construct();
        $this->capAnalysisService = $capAnalysisService;
    }

    public function handle()
    {
        if ($this->option('clear')) {
            $this->clearTestData();
            return Command::SUCCESS;
        }

        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø...');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        $chat = $this->createTestChat();
        
        // –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã
        $this->info("\nüìù –¢–µ—Å—Ç 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã");
        $result1 = $this->testCreateNewCap($chat);
        $this->displayResult($result1);
        
        // –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–ø—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        $this->info("\nüîÑ –¢–µ—Å—Ç 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–ø—ã —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏");
        $result2 = $this->testUpdateExistingCap($chat);
        $this->displayResult($result2);
        
        // –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        $this->info("\n‚ö° –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π");
        $result3 = $this->testUpdateWithoutChanges($chat);
        $this->displayResult($result3);
        
        // –¢–µ—Å—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å GMT
        $this->info("\nüïí –¢–µ—Å—Ç 4: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å GMT");
        $result4 = $this->testMultipleSchedulesWithGMT($chat);
        $this->displayResult($result4);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        $this->info("\nüìö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø:");
        $this->checkHistory();
        
        $this->info("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
        return Command::SUCCESS;
    }

    private function createTestChat()
    {
        return Chat::firstOrCreate([
            'chat_id' => -12345678,
            'type' => 'supergroup',
            'title' => 'Test Cap History Chat',
            'is_active' => true
        ]);
    }

    private function testCreateNewCap($chat)
    {
        $messageText = "Affiliate: TestAff1
Recipient: TestRec1
Cap: 50
Total: 500
Geo: US
Language: en
Funnel: TestFunnel
Schedule: 10:00/18:00 GMT+03:00
Date: 25.12.2024
Pending ACQ: No
Freeze status on ACQ: No";

        $message = Message::create([
            'chat_id' => $chat->id,
            'message' => $messageText,
            'user' => 'TestUser',
            'telegram_message_id' => rand(1000, 9999),
            'telegram_user_id' => 123456,
            'telegram_date' => now()
        ]);

        $result = $this->capAnalysisService->analyzeAndSaveCapMessage($message->id, $messageText);
        
        return [
            'type' => 'create',
            'result' => $result,
            'message_id' => $message->id
        ];
    }

    private function testUpdateExistingCap($chat)
    {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–º–∏ –∂–µ affiliate, recipient, geo –Ω–æ —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏
        $messageText = "Affiliate: TestAff1
Recipient: TestRec1
Cap: 75
Total: 750
Geo: US
Language: es
Funnel: UpdatedFunnel
Schedule: 12:00/20:00 GMT+03:00
Date: 26.12.2024
Pending ACQ: Yes
Freeze status on ACQ: Yes";

        $message = Message::create([
            'chat_id' => $chat->id,
            'message' => $messageText,
            'user' => 'TestUser2',
            'telegram_message_id' => rand(1000, 9999),
            'telegram_user_id' => 123457,
            'telegram_date' => now()
        ]);

        $result = $this->capAnalysisService->analyzeAndSaveCapMessage($message->id, $messageText);
        
        return [
            'type' => 'update',
            'result' => $result,
            'message_id' => $message->id
        ];
    }

    private function testUpdateWithoutChanges($chat)
    {
        // –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–µ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        $messageText = "Affiliate: TestAff1
Recipient: TestRec1
Cap: 75
Total: 750
Geo: US
Language: es
Funnel: UpdatedFunnel
Schedule: 12:00/20:00 GMT+03:00
Date: 26.12.2024
Pending ACQ: Yes
Freeze status on ACQ: Yes";

        $message = Message::create([
            'chat_id' => $chat->id,
            'message' => $messageText,
            'user' => 'TestUser3',
            'telegram_message_id' => rand(1000, 9999),
            'telegram_user_id' => 123458,
            'telegram_date' => now()
        ]);

        $result = $this->capAnalysisService->analyzeAndSaveCapMessage($message->id, $messageText);
        
        return [
            'type' => 'no_changes',
            'result' => $result,
            'message_id' => $message->id
        ];
    }

    private function testMultipleSchedulesWithGMT($chat)
    {
        $messageText = "Affiliate: TestAff2
Recipient: TestRec2
Cap: 30 40
Total: 
Geo: DE FR
Language: de
Funnel: 
Schedule: 18:00/01:00 18:00/02:00 GMT+03:00
Date: 
Pending ACQ: No
Freeze status on ACQ: No";

        $message = Message::create([
            'chat_id' => $chat->id,
            'message' => $messageText,
            'user' => 'TestUser4',
            'telegram_message_id' => rand(1000, 9999),
            'telegram_user_id' => 123459,
            'telegram_date' => now()
        ]);

        $result = $this->capAnalysisService->analyzeAndSaveCapMessage($message->id, $messageText);
        
        return [
            'type' => 'multiple_schedules',
            'result' => $result,
            'message_id' => $message->id
        ];
    }

    private function displayResult($testResult)
    {
        $result = $testResult['result'];
        
        $this->line("  üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:");
        $this->line("    - –°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö: " . ($result['cap_entries_count'] ?? 0));
        $this->line("    - –û–±–Ω–æ–≤–ª–µ–Ω–æ: " . ($result['updated_entries_count'] ?? 0));
        $this->line("    - –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: " . ($result['total_processed'] ?? 0));
        
        if ($testResult['type'] === 'multiple_schedules') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ GMT –ø—Ä–∏–º–µ–Ω–∏–ª—Å—è –∫–æ –≤—Å–µ–º –∑–∞–ø–∏—Å—è–º
            $caps = Cap::whereHas('message', function($q) use ($testResult) {
                $q->where('id', $testResult['message_id']);
            })->get();
            
            $this->line("  üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ GMT –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è—Ö:");
            foreach ($caps as $cap) {
                $geo = $cap->geos[0] ?? 'N/A';
                $timezone = $cap->timezone ?? 'NULL';
                $this->line("    - –ì–µ–æ: {$geo}, Timezone: {$timezone}");
            }
        }
    }

    private function checkHistory()
    {
        $historyCount = CapHistory::count();
        $capsCount = Cap::count();
        
        $this->line("  üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
        $this->line("    - –ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {$historyCount}");
        $this->line("    - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–ø: {$capsCount}");
        
        if ($historyCount > 0) {
            $this->line("  üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏:");
            CapHistory::latest()->take(3)->get()->each(function($history) {
                $this->line("    - ID –∫–∞–ø—ã: {$history->cap_id}, Affiliate: {$history->affiliate_name}, –î–∞—Ç–∞ –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏: {$history->archived_at->format('H:i:s')}");
            });
        }
    }

    private function clearTestData()
    {
        $this->info('üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        Message::whereHas('chat', function($q) {
            $q->where('chat_id', -12345678);
        })->delete();
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        Chat::where('chat_id', -12345678)->delete();
        
        $this->info('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!');
    }
} 