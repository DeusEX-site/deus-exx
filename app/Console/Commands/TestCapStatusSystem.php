<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Models\Message;
use App\Models\Chat;
use App\Models\Cap;
use App\Services\CapAnalysisService;

class TestCapStatusSystem extends Command
{
    protected $signature = 'test:cap-status-system';
    protected $description = '–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –∫–∞–ø (RUN/STOP/DELETE)';

    public function handle()
    {
        $this->info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –∫–∞–ø...');
        
        $capAnalysisService = new CapAnalysisService();
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
        $chat = Chat::updateOrCreate(
            ['chat_id' => -1001234567890], // –ü–æ–∏—Å–∫ –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ø–æ–ª—é
            [
                'title' => 'Test Chat (Status System)',
                'display_order' => 1
            ]
        );
        
        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        Cap::where('affiliate_name', 'G06')->delete();
        
        $this->info('üìã –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã...');
        
        // –°–æ–∑–¥–∞–µ–º –∫–∞–ø—É
        $createMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1001,
            'user' => 'Test User',
            'message' => "Affiliate: G06\nRecipient: TMedia\nCap: 20\nGeo: AT\nSchedule: 24/7"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($createMessage->id, $createMessage->message);
        
        $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞–ø–∞: {$result['cap_entries_count']} –∑–∞–ø–∏—Å–µ–π");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º RUN
        $cap = Cap::where('affiliate_name', 'G06')
                 ->where('recipient_name', 'TMedia')
                 ->whereJsonContains('geos', 'AT')
                 ->first();
        
        if ($cap && $cap->status === 'RUN') {
            $this->info("‚úÖ –ö–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º RUN (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –∫–∞–ø–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 2: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–ø—ã (–ø–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞)...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–ø—É –ø–æ–ª–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π
        $stopMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1002,
            'user' => 'Test User',
            'message' => "Affiliate: G06\nRecipient: TMedia\nCap: 20\nGeo: AT\nSTOP"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($stopMessage->id, $stopMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {$result['message']}");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–ø—ã");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        $cap->refresh();
        if ($cap->status === 'STOP') {
            $this->info("‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–ø—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ STOP");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –∫–∞–ø—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 3: –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π)...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–ø—ã –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $existingCaps = Cap::where('affiliate_name', 'G06')
                          ->where('recipient_name', 'TMedia')
                          ->whereJsonContains('geos', 'AT')
                          ->get();
        
        $this->info("DEBUG: –°—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–ø G06‚ÜíTMedia(AT): " . $existingCaps->count());
        foreach ($existingCaps as $existingCap) {
            $this->info("  - Cap ID {$existingCap->id}: —Å—Ç–∞—Ç—É—Å {$existingCap->status}, –ª–∏–º–∏—Ç " . implode(',', $existingCap->cap_amounts));
        }
        
        // –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∫–∞–ø—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π - –æ–Ω–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞–ø—ã
        $resumeMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1003,
            'user' => 'Test User',
            'message' => "Affiliate: G06\nRecipient: TMedia\nCap: 25\nGeo: AT\nSchedule: 24/7"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($resumeMessage->id, $resumeMessage->message);
        
        $this->info("DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞–ø—ã: " . json_encode($result));
        
        if ($result['updated_entries_count'] === 1) {
            $this->info("‚úÖ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω —Å 20 –Ω–∞ 25)");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–∞–ø—ã");
            $this->error("–û–∂–∏–¥–∞–ª–∏: updated_entries_count = 1, –ø–æ–ª—É—á–∏–ª–∏: " . ($result['updated_entries_count'] ?? 'null'));
            if (isset($result['error'])) {
                $this->error("–û—à–∏–±–∫–∞: " . $result['error']);
            }
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–∞–ø—É (–æ–Ω–∞ –≤—Å—ë –µ—â—ë –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è, –Ω–æ —Å –Ω–æ–≤—ã–º –ª–∏–º–∏—Ç–æ–º)
        $activeCap = Cap::where('affiliate_name', 'G06')
                       ->where('recipient_name', 'TMedia')
                       ->whereJsonContains('geos', 'AT')
                       ->where('status', 'STOP') // –ö–∞–ø–∞ –≤—Å—ë –µ—â—ë –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è
                       ->first();
        
        if (!$activeCap) {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        if ($activeCap->cap_amounts[0] === 25) {
            $this->info("‚úÖ –õ–∏–º–∏—Ç –∫–∞–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω —Å 20 –Ω–∞ 25");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –∫–∞–ø—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è (—Ç–µ–∫—É—â–∏–π: " . $activeCap->cap_amounts[0] . ")");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 3b: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π...');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞–ø—É
        $deleteMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 10031,
            'user' => 'Test User',
            'message' => "Affiliate: G06\nRecipient: TMedia\nCap: 25\nGeo: AT\nDELETE"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($deleteMessage->id, $deleteMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –°—Ç–∞—Ä–∞—è –∫–∞–ø–∞ —É–¥–∞–ª–µ–Ω–∞");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π –∫–∞–ø—ã");
            return;
        }
        
        // –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—É —Å —Ç–µ–º–∏ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        $newCapMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 10032,
            'user' => 'Test User',
            'message' => "Affiliate: G06\nRecipient: TMedia\nCap: 30\nGeo: AT\nSchedule: 24/7"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($newCapMessage->id, $newCapMessage->message);
        
        if ($result['cap_entries_count'] === 1) {
            $this->info("‚úÖ –ù–æ–≤–∞—è –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞–ø—ã –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–π");
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∞–∫—Ç–∏–≤–Ω—É—é –∫–∞–ø—É
        $activeCap = Cap::where('affiliate_name', 'G06')
                       ->where('recipient_name', 'TMedia')
                       ->whereJsonContains('geos', 'AT')
                       ->where('status', 'RUN')
                       ->first();
        
        if (!$activeCap) {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –Ω–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 4: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ STOP (—á–µ—Ä–µ–∑ reply_to_message)...');
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–ø—É –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
        $simpleStopMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1004,
            'reply_to_message_id' => $newCapMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
            'user' => 'Test User',
            'message' => "STOP"
        ]);
        
        $this->info("DEBUG: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–ø—É ID {$activeCap->id} (—Å—Ç–∞—Ç—É—Å {$activeCap->status})");
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($simpleStopMessage->id, $simpleStopMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π: {$result['message']}");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–ø—ã –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        $activeCap->refresh();
        if ($activeCap->status === 'STOP') {
            $this->info("‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–ø—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ STOP —á–µ—Ä–µ–∑ reply_to_message");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –∫–∞–ø—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 5: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ DELETE (—á–µ—Ä–µ–∑ reply_to_message)...');
        
        // –£–¥–∞–ª—è–µ–º –∫–∞–ø—É –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
        $simpleDeleteMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1005,
            'reply_to_message_id' => $newCapMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
            'user' => 'Test User',
            'message' => "DELETE"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($simpleDeleteMessage->id, $simpleDeleteMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π: {$result['message']}");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—ã –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        $activeCap->refresh();
        if ($activeCap->status === 'DELETE') {
            $this->info("‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–ø—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ DELETE —á–µ—Ä–µ–∑ reply_to_message");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –∫–∞–ø—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 6: –ü—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ RESTORE (–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)...');
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é –∫–∞–ø—É –ø—Ä–æ—Å—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
        $simpleRestoreMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1006,
            'reply_to_message_id' => $newCapMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
            'user' => 'Test User',
            'message' => "RESTORE"
        ]);
        
        $this->info("DEBUG: –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–ø—É ID {$activeCap->id} (—Å—Ç–∞—Ç—É—Å {$activeCap->status})");
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($simpleRestoreMessage->id, $simpleRestoreMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {$result['message']}");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: " . ($result['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            $this->info("DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç RESTORE –∫–æ–º–∞–Ω–¥—ã: " . json_encode($result));
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å RUN –ø–æ—Å–ª–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è)
        $activeCap->refresh();
        if ($activeCap->status === 'RUN') {
            $this->info("‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–ø—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RUN –ø–æ—Å–ª–µ RESTORE");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –∫–∞–ø—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ RESTORE");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ reply_to_message...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º RUN
        $activeCap->refresh();
        $this->info("DEBUG: –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–∞–ø—ã: {$activeCap->status}");
        
        // –ï—Å–ª–∏ –∫–∞–ø–∞ –Ω–µ STOP, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë (–æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π)
        if ($activeCap->status !== 'STOP') {
            $stopMessage2 = Message::create([
                'chat_id' => $chat->id,
                'telegram_message_id' => 1009, // –ò–∑–º–µ–Ω–∏–ª —Å 1007 —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å
                'reply_to_message_id' => $newCapMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
                'user' => 'Test User',
                'message' => "STOP"
            ]);
            
            $result = $capAnalysisService->analyzeAndSaveCapMessage($stopMessage2->id, $stopMessage2->message);
            
            if (isset($result['status_changed']) && $result['status_changed'] === 1) {
                $this->info("‚úÖ –ö–∞–ø–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RUN");
            } else {
                $this->error("‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–∞–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è RUN: " . ($result['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                return;
            }
            
            $activeCap->refresh();
            $this->info("DEBUG: –°—Ç–∞—Ç—É—Å –ø–æ—Å–ª–µ STOP: {$activeCap->status}");
        }
        
        // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å–∫–∞–µ–º –∫–∞–ø—É –∫–æ–º–∞–Ω–¥–æ–π RUN (–æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π)
        $simpleRunMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1010, // –ò–∑–º–µ–Ω–∏–ª —Å 1008 
            'reply_to_message_id' => $newCapMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
            'user' => 'Test User',
            'message' => "RUN"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($simpleRunMessage->id, $simpleRunMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–æ–π RUN: {$result['message']}");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–∞–ø—ã –∫–æ–º–∞–Ω–¥–æ–π RUN: " . ($result['error'] ?? '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
            $this->info("DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç RUN –∫–æ–º–∞–Ω–¥—ã: " . json_encode($result));
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        $activeCap->refresh();
        if ($activeCap->status === 'RUN') {
            $this->info("‚úÖ –°—Ç–∞—Ç—É—Å –∫–∞–ø—ã –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ RUN –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã RUN");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —Å—Ç–∞—Ç—É—Å –∫–∞–ø—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã RUN (—Ç–µ–∫—É—â–∏–π: {$activeCap->status})");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É...');
        
        // –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –∫–∞–ø—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        $deleteForFilterMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1011,
            'reply_to_message_id' => $newCapMessage->id,
            'user' => 'Test User',
            'message' => "DELETE"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($deleteForFilterMessage->id, $deleteForFilterMessage->message);
        
        if (isset($result['status_changed']) && $result['status_changed'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏");
            return;
        }
        
        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–ø
        $activeCaps = $capAnalysisService->searchCaps(null, $chat->id);
        
        // –î–æ–ª–∂–Ω—ã –Ω–∞–π—Ç–∏ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞–ø—ã –∫—Ä–æ–º–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π (–≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–ø –∏–∑ –¥—Ä—É–≥–∏—Ö —Ç–µ—Å—Ç–æ–≤)
        $hasDeletedCap = false;
        foreach ($activeCaps as $capResult) {
            if ($capResult['analysis']['affiliate_name'] === 'G06' && 
                $capResult['analysis']['recipient_name'] === 'TMedia' &&
                in_array('AT', $capResult['analysis']['geos'])) {
                $hasDeletedCap = true;
                break;
            }
        }
        
        if (!$hasDeletedCap) {
            $this->info("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–ø");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —É–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –≤ –ø–æ–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–ø");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É DELETE
        $deletedCaps = $capAnalysisService->searchCapsWithFilters(null, $chat->id, ['status' => 'DELETE']);
        
        // –ò—â–µ–º –Ω–∞—à—É —É–¥–∞–ª–µ–Ω–Ω—É—é –∫–∞–ø—É —Å—Ä–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        $foundDeletedCap = false;
        foreach ($deletedCaps as $capResult) {
            if ($capResult['analysis']['affiliate_name'] === 'G06' && 
                $capResult['analysis']['recipient_name'] === 'TMedia' &&
                in_array('AT', $capResult['analysis']['geos'])) {
                $foundDeletedCap = true;
                break;
            }
        }
        
        if ($foundDeletedCap) {
            $this->info("‚úÖ –£–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º DELETE");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —É–¥–∞–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å —Ñ–∏–ª—å—Ç—Ä–æ–º DELETE");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π...');
        
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ–π –∫–∞–ø—ã (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–Ω–æ–≥–æ –∑–∞–ø–∏—Å–µ–π: STOP + DELETE + RESTORE + STOP + RUN)
        $historyCount = $activeCap->history()->count();

        if ($historyCount >= 4) {
            $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–æ {$historyCount} –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ (STOP + DELETE + RESTORE + STOP + RUN)");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏ ({$historyCount})");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 10: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ reply_to_message...');
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $newCapMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1020,
            'user' => 'Test User',
            'message' => "Affiliate: TestAffiliate\nRecipient: TestRecipient\nCap: 30\nGeo: DE\nSchedule: 24/7"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($newCapMessage->id, $newCapMessage->message);
        
        if ($result['cap_entries_count'] === 1) {
            $this->info("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞–ø—ã");
            return;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ø—É —á–µ—Ä–µ–∑ reply_to_message (—É–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ Geo)
        $updateMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1021,
            'reply_to_message_id' => $newCapMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
            'user' => 'Test User',
            'message' => "Cap: 35\nGeo: DE" // –¢–æ–ª—å–∫–æ Geo –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, Cap –æ–±–Ω–æ–≤–ª—è–µ–º
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($updateMessage->id, $updateMessage->message);
        
        if (isset($result['updated_entries_count']) && $result['updated_entries_count'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ reply_to_message");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply_to_message");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è
        $updatedCap = Cap::where('affiliate_name', 'TestAffiliate')
                         ->where('recipient_name', 'TestRecipient')
                         ->whereJsonContains('geos', 'DE')
                         ->where('status', 'RUN')
                         ->first();
        
        if ($updatedCap && $updatedCap->cap_amounts[0] === 35) {
            $this->info("‚úÖ –õ–∏–º–∏—Ç –∫–∞–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω —Å 30 –¥–æ 35");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –∫–∞–ø—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è");
            return;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã —Å –Ω–æ–≤—ã–º –≥–µ–æ
        $wrongGeoMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1022,
            'reply_to_message_id' => $newCapMessage->id,
            'user' => 'Test User',
            'message' => "Cap: 40\nGeo: FR" // –ù–æ–≤–æ–µ –≥–µ–æ
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($wrongGeoMessage->id, $wrongGeoMessage->message);
        
        if ($result['cap_entries_count'] === 1) {
            $this->info("‚úÖ –ü—Ä–∏ –Ω–æ–≤–æ–º –≥–µ–æ —Å–æ–∑–¥–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∫–∞–ø–∞ (–∫–∞–∫ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å)");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–∏ –Ω–æ–≤–æ–º –≥–µ–æ –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤–∞—è –∫–∞–ø–∞");
            return;
        }
        
        $this->info('üìã –≠—Ç–∞–ø 11: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫...');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–ø—ã
        $errorMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1030,
            'user' => 'Test User',
            'message' => "Affiliate: NonExistent\nRecipient: NonExistent\nCap: 999\nGeo: XX\nSTOP"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($errorMessage->id, $errorMessage->message);
        
        if (isset($result['error']) && $result['error'] === '–ö–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞') {
            $this->info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–ø—ã");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–∞–ø—ã");
            return;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –ø—Ä–æ—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ reply_to_message
        $noReplyMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1031,
            'user' => 'Test User',
            'message' => "STOP"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($noReplyMessage->id, $noReplyMessage->message);
        
        if (isset($result['error']) && $result['error'] === '–ö–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π') {
            $this->info("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ reply_to_message");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –±–µ–∑ reply_to_message");
            return;
        }
        
        $this->info('üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
        
        // –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É –ø–æ –≤—Å–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∫–∞–ø–∞–º
        $allCaps = Cap::whereIn('affiliate_name', ['G06', 'TestAffiliate'])
                     ->get();
        
        $this->table([
            'ID', 'Affiliate', 'Recipient', 'Geo', 'Cap', '–°—Ç–∞—Ç—É—Å', '–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏'
        ], $allCaps->map(function($cap) {
            return [
                $cap->id,
                $cap->affiliate_name,
                $cap->recipient_name,
                implode(', ', $cap->geos),
                $cap->cap_amounts[0],
                $cap->status,
                $cap->history()->count()
            ];
        })->toArray());
        
        $this->info('üìù –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!');
        $this->info('');
        $this->info('‚ú® –ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:');
        $this->info('1. –ö–æ–º–∞–Ω–¥—ã RUN/STOP/DELETE/RESTORE –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ reply_to_message');
        $this->info('2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø —á–µ—Ä–µ–∑ reply_to_message (—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ Geo)');
        $this->info('3. –°—Ç–∞—Ç—É—Å—ã –∫–∞–ø: RUN (–∞–∫—Ç–∏–≤–Ω—ã–µ), STOP (–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ), DELETE (—É–¥–∞–ª–µ–Ω–Ω—ã–µ)');
        $this->info('4. RESTORE - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã (DELETE ‚Üí RUN)');
        $this->info('5. –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π');
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≥–µ–æ
        $this->info("üìù –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply_to_message (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç)...");
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
        $newCapMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1021,
            'user' => 'Test User',
            'message' => "Affiliate: TestAffiliate\nRecipient: TestRecipient\nCap: 30\nGeo: DE"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($newCapMessage->id, $newCapMessage->message);
        
        if (isset($result['cap_entries_count']) && $result['cap_entries_count'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è");
            return;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º (—Ç–æ–ª—å–∫–æ Geo + –ø–æ–ª—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        $updateMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1022,
            'reply_to_message_id' => $newCapMessage->id,
            'user' => 'Test User',
            'message' => "Geo: DE\nCap: 35\nSchedule: 10:00/18:00"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($updateMessage->id, $updateMessage->message);
        
        if (isset($result['updated_entries_count']) && $result['updated_entries_count'] === 1) {
            $this->info("‚úÖ –ö–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ reply —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply —Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏–º–∏—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        $updatedCap = Cap::where('affiliate_name', 'TestAffiliate')
                         ->where('recipient_name', 'TestRecipient')
                         ->whereJsonContains('geos', 'DE')
                         ->where('status', 'RUN')
                         ->first();
        
        if ($updatedCap && $updatedCap->cap_amounts[0] === 35 && $updatedCap->schedule === '10:00/18:00') {
            $this->info("‚úÖ –õ–∏–º–∏—Ç –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –ª–∏–º–∏—Ç –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–ø—ã –Ω–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å");
            return;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –≥–µ–æ
        $newGeoMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1023,
            'reply_to_message_id' => $newCapMessage->id,
            'user' => 'Test User',
            'message' => "Geo: FR\nCap: 40" // –ù–æ–≤–æ–µ –≥–µ–æ
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($newGeoMessage->id, $newGeoMessage->message);
        
        if (isset($result['cap_entries_count']) && $result['cap_entries_count'] === 1) {
            $this->info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–µ–æ FR");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –¥–æ–ª–∂–Ω–∞ —Å–æ–∑–¥–∞—Ç—å—Å—è –Ω–æ–≤–∞—è –∫–∞–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–µ–æ");
            return;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫—É - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–µ–∑ –≥–µ–æ
        $noGeoMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1024,
            'reply_to_message_id' => $newCapMessage->id,
            'user' => 'Test User',
            'message' => "Cap: 50\nSchedule: 24/7" // –ë–µ–∑ –≥–µ–æ
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($noGeoMessage->id, $noGeoMessage->message);
        
        if (isset($result['cap_entries_count']) && $result['cap_entries_count'] === 0) {
            $this->info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Geo –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ Geo –¥–æ–ª–∂–Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è");
            return;
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º–∏ –ø–æ–ª—è–º–∏ (—Å–±—Ä–æ—Å –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        $resetMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1025,
            'reply_to_message_id' => $newCapMessage->id,
            'user' => 'Test User',
            'message' => "Geo: DE\nTotal:\nSchedule:\nLanguage:" // –ü—É—Å—Ç—ã–µ –ø–æ–ª—è
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($resetMessage->id, $resetMessage->message);
        
        if (isset($result['updated_entries_count']) && $result['updated_entries_count'] === 1) {
            $this->info("‚úÖ –ü—É—Å—Ç—ã–µ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã
        $resetCap = Cap::where('affiliate_name', 'TestAffiliate')
                      ->where('recipient_name', 'TestRecipient')
                      ->whereJsonContains('geos', 'DE')
                      ->where('status', 'RUN')
                      ->first();
        
        if ($resetCap && $resetCap->total_amount === -1 && $resetCap->schedule === '24/7' && $resetCap->language === 'en') {
            $this->info("‚úÖ –ü–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—è –Ω–µ —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é");
            return;
        }

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É reply (reply –Ω–∞ reply)
        $chainReplyMessage = Message::create([
            'chat_id' => $chat->id,
            'telegram_message_id' => 1026,
            'reply_to_message_id' => $updateMessage->id, // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            'user' => 'Test User',
            'message' => "Geo: DE\nCap: 45\nLanguage: de"
        ]);
        
        $result = $capAnalysisService->analyzeAndSaveCapMessage($chainReplyMessage->id, $chainReplyMessage->message);
        
        if (isset($result['updated_entries_count']) && $result['updated_entries_count'] === 1) {
            $this->info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É reply —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É reply");
            return;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ
        $chainCap = Cap::where('affiliate_name', 'TestAffiliate')
                      ->where('recipient_name', 'TestRecipient')
                      ->whereJsonContains('geos', 'DE')
                      ->where('status', 'RUN')
                      ->first();
        
        if ($chainCap && $chainCap->cap_amounts[0] === 45 && $chainCap->language === 'de') {
            $this->info("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É reply –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ");
        } else {
            $this->error("‚ùå –û—à–∏–±–∫–∞: –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É reply –Ω–µ –ø—Ä–æ—à–ª–æ");
            return;
        }
        
        return 0;
    }
} 