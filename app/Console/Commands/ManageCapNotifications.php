<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use App\Services\CapNotificationService;
use App\Models\Chat;
use Illuminate\Support\Facades\Http;

class ManageCapNotifications extends Command
{
    protected $signature = 'cap-notifications:manage 
                           {action : enable/disable/status/test/get-chat-id}
                           {--chat-id= : ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è}';
    
    protected $description = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–ø–∞—Ö';

    public function handle()
    {
        $action = $this->argument('action');
        
        switch ($action) {
            case 'enable':
                return $this->enableNotifications();
            case 'disable':
                return $this->disableNotifications();
            case 'status':
                return $this->showStatus();
            case 'test':
                return $this->testNotifications();
            case 'get-chat-id':
                return $this->getChatId();
            default:
                $this->error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: enable, disable, status, test, get-chat-id');
                return Command::FAILURE;
        }
    }
    
    private function enableNotifications()
    {
        $this->info('üîî –í–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–ø–∞—Ö...');
        
        $envPath = base_path('.env');
        if (!file_exists($envPath)) {
            $this->error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return Command::FAILURE;
        }
        
        $envContent = file_get_contents($envPath);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if (preg_match('/TELEGRAM_CAP_NOTIFICATIONS_ENABLED=(.*)/', $envContent)) {
            $envContent = preg_replace('/TELEGRAM_CAP_NOTIFICATIONS_ENABLED=(.*)/', 'TELEGRAM_CAP_NOTIFICATIONS_ENABLED=true', $envContent);
        } else {
            $envContent .= "\nTELEGRAM_CAP_NOTIFICATIONS_ENABLED=true";
        }
        
        file_put_contents($envPath, $envContent);
        
        $this->info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã');
        $this->info('üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        
        return Command::SUCCESS;
    }
    
    private function disableNotifications()
    {
        $this->info('üîï –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–ø–∞—Ö...');
        
        $envPath = base_path('.env');
        if (!file_exists($envPath)) {
            $this->error('‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return Command::FAILURE;
        }
        
        $envContent = file_get_contents($envPath);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        if (preg_match('/TELEGRAM_CAP_NOTIFICATIONS_ENABLED=(.*)/', $envContent)) {
            $envContent = preg_replace('/TELEGRAM_CAP_NOTIFICATIONS_ENABLED=(.*)/', 'TELEGRAM_CAP_NOTIFICATIONS_ENABLED=false', $envContent);
        } else {
            $envContent .= "\nTELEGRAM_CAP_NOTIFICATIONS_ENABLED=false";
        }
        
        file_put_contents($envPath, $envContent);
        
        $this->info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã');
        $this->info('üí° –î–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ');
        
        return Command::SUCCESS;
    }
    
    private function showStatus()
    {
        $this->info('üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∫–∞–ø–∞—Ö');
        $this->line('');
        
        $botToken = config('telegram.bot_token');
        $enabled = config('telegram.cap_notifications.enabled', true);
        $adminChatId = config('telegram.cap_notifications.admin_chat_id');
        $notifyCreate = config('telegram.cap_notifications.notify_on_create', true);
        $notifyUpdate = config('telegram.cap_notifications.notify_on_update', true);
        $notifyUnchanged = config('telegram.cap_notifications.notify_on_unchanged', false);
        $bulkThreshold = config('telegram.cap_notifications.bulk_threshold', 3);
        
        $this->info('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏:');
        $this->info("  - Bot Token: " . ($botToken ? '‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: " . ($enabled ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->info("  - –ê–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç: " . ($adminChatId ? "‚úÖ {$adminChatId}" : '‚ùå –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏: " . ($notifyCreate ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: " . ($notifyUpdate ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->info("  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–∏–∑–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: " . ($notifyUnchanged ? '‚úÖ –í–∫–ª—é—á–µ–Ω—ã' : '‚ùå –û—Ç–∫–ª—é—á–µ–Ω—ã'));
        $this->info("  - –ü–æ—Ä–æ–≥ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏: {$bulkThreshold}");
        
        $this->line('');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Telegram API
        if ($botToken) {
            $this->info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Telegram API...');
            
            try {
                $response = Http::timeout(10)->get("https://api.telegram.org/bot{$botToken}/getMe");
                $result = $response->json();
                
                if ($result['ok']) {
                    $botInfo = $result['result'];
                    $this->info("‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{$botInfo['username']} ({$botInfo['first_name']})");
                } else {
                    $this->error('‚ùå –û—à–∏–±–∫–∞ API: ' . ($result['description'] ?? 'Unknown error'));
                }
            } catch (\Exception $e) {
                $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
            }
        }
        
        $this->line('');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã
        $chats = Chat::active()->orderBy('title')->get();
        $this->info("üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({$chats->count()}):");
        
        foreach ($chats as $chat) {
            $this->info("  - {$chat->title} (ID: {$chat->chat_id})");
        }
        
        return Command::SUCCESS;
    }
    
    private function testNotifications()
    {
        $chatId = $this->option('chat-id');
        
        if (!$chatId) {
            $this->error('‚ùå –£–∫–∞–∂–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: --chat-id=CHAT_ID');
            return Command::FAILURE;
        }
        
        $this->info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —á–∞—Ç: {$chatId}");
        
        $botToken = config('telegram.bot_token');
        if (!$botToken) {
            $this->error('‚ùå Bot token –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
            return Command::FAILURE;
        }
        
        $testMessage = "üîî <b>–¢–ï–°–¢ –£–í–ï–î–û–ú–õ–ï–ù–ò–ô</b>\n\n" .
                      "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø.\n" .
                      "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n\n" .
                      "üïê –í—Ä–µ–º—è: " . now()->format('d.m.Y H:i:s');
        
        try {
            $response = Http::timeout(10)->post("https://api.telegram.org/bot{$botToken}/sendMessage", [
                'chat_id' => $chatId,
                'text' => $testMessage,
                'parse_mode' => 'HTML'
            ]);
            
            $result = $response->json();
            
            if ($result['ok']) {
                $this->info('‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
                $this->info("üì® Message ID: {$result['result']['message_id']}");
            } else {
                $this->error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' . ($result['description'] ?? 'Unknown error'));
            }
            
        } catch (\Exception $e) {
            $this->error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' . $e->getMessage());
        }
        
        return Command::SUCCESS;
    }
    
    private function getChatId()
    {
        $this->info('üì± –ü–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        $this->line('');
        
        $chats = Chat::active()->orderBy('title')->get();
        
        if ($chats->isEmpty()) {
            $this->warn('‚ùå –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
            $this->line('');
            $this->info('üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID —á–∞—Ç–∞:');
            $this->info('  1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ —á–∞—Ç');
            $this->info('  2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ');
            $this->info('  3. ID —á–∞—Ç–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –ª–æ–≥–∞—Ö –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É —Å–Ω–æ–≤–∞');
            return Command::SUCCESS;
        }
        
        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ —á–∞—Ç–æ–≤: {$chats->count()}");
        $this->line('');
        
        $this->table(
            ['–ù–∞–∑–≤–∞–Ω–∏–µ', 'ID —á–∞—Ç–∞', '–¢–∏–ø', '–°–æ–æ–±—â–µ–Ω–∏–π'],
            $chats->map(function ($chat) {
                return [
                    $chat->title ?: '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                    $chat->chat_id,
                    $chat->type,
                    $chat->message_count
                ];
            })->toArray()
        );
        
        $this->line('');
        $this->info('üí° –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:');
        $this->info('  php artisan cap-notifications:manage test --chat-id=CHAT_ID');
        
        return Command::SUCCESS;
    }
} 