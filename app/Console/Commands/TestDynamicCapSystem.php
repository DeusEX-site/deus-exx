<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;

class TestDynamicCapSystem extends Command
{
    protected $signature = 'test:dynamic-cap-system 
                           {type=full : –¢–∏–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (full, quick, create, update, status, reset)}
                           {--max-tests=50 : –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏}
                           {--max-combinations=3 : –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–æ–ª–µ–π}
                           {--max-permutations=12 : –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫}
                           {--no-reports : –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—á–µ—Ç—ã –≤ —Ñ–∞–π–ª—ã}
                           {--no-cleanup : –ù–µ –æ—á–∏—â–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è}
                           {--silent : –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥)}
                           {--timeout=300 : –¢–∞–π–º–∞—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö}';

    protected $description = '–ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø —Å –ø–æ–ª–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π';

    public function handle()
    {
        $this->info('üöÄ –ó–∞–ø—É—Å–∫ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø...');
        $this->info('');
        
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
        $this->loadDynamicTestSystem();
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        $config = $this->buildConfig();
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        $this->displayConfiguration($config);
        
        // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–∞–Ω–Ω–µ—Ä–∞
        $runner = new \DynamicCapTestRunner($config);
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        $type = $this->argument('type');
        $this->runTestsByType($runner, $type);
        
        $this->info('');
        $this->info('‚úÖ –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!');
        
        return Command::SUCCESS;
    }

    /**
     * –ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤
     */
    private function loadDynamicTestSystem(): void
    {
        $baseDir = base_path();
        $files = [
            'DynamicCapTestGenerator.php',
            'DynamicCapTestEngine.php',
            'DynamicCapCombinationGenerator.php',
            'DynamicCapReportGenerator.php',
            'dynamic_cap_test_runner.php'
        ];
        
        foreach ($files as $file) {
            $filepath = $baseDir . '/' . $file;
            if (!file_exists($filepath)) {
                $this->error("‚ùå –§–∞–π–ª {$file} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞");
                $this->error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞");
                exit(1);
            }
            require_once $filepath;
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private function buildConfig(): array
    {
        return [
            'skip_laravel_init' => true, // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é Laravel, —Ç.–∫. —É–∂–µ –≤ Artisan
            'verbose' => !$this->option('silent'),
            'save_reports' => !$this->option('no-reports'),
            'cleanup_after_test' => !$this->option('no-cleanup'),
            'test_types' => $this->getTestTypes(),
            'max_tests_per_type' => (int)$this->option('max-tests'),
            'max_combination_size' => (int)$this->option('max-combinations'),
            'max_permutations' => (int)$this->option('max-permutations'),
            'test_timeout' => (int)$this->option('timeout')
        ];
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø—ã —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
     */
    private function getTestTypes(): string
    {
        $type = $this->argument('type');
        
        switch ($type) {
            case 'create':
                return 'create_only';
            case 'update':
                return 'update_only';
            case 'status':
                return 'status_only';
            case 'quick':
            case 'full':
            default:
                return 'all';
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
     */
    private function displayConfiguration(array $config): void
    {
        $this->info('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        $this->line("   ‚Ä¢ –¢–∏–ø —Ç–µ—Å—Ç–æ–≤: {$config['test_types']}");
        $this->line("   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ç–∏–ø: {$config['max_tests_per_type']}");
        $this->line("   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–π: {$config['max_combination_size']}");
        $this->line("   ‚Ä¢ –ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫: {$config['max_permutations']}");
        $this->line("   ‚Ä¢ –¢–∞–π–º–∞—É—Ç: {$config['test_timeout']} —Å–µ–∫");
        $this->line("   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤: " . ($config['save_reports'] ? '–î–∞' : '–ù–µ—Ç'));
        $this->line("   ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤: " . ($config['cleanup_after_test'] ? '–î–∞' : '–ù–µ—Ç'));
        $this->line("   ‚Ä¢ –†–µ–∂–∏–º –≤—ã–≤–æ–¥–∞: " . ($config['verbose'] ? '–ü–æ–¥—Ä–æ–±–Ω—ã–π' : '–¢–∏—Ö–∏–π'));
        $this->info('');
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
     */
    private function runTestsByType($runner, string $type): void
    {
        switch ($type) {
            case 'quick':
                $this->info('‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...');
                $runner->runQuickTest();
                break;
                
            case 'status':
                $this->info('üîß –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç—É—Å–∞...');
                $runner->runStatusCommandTests();
                break;
                
            case 'reset':
                $this->info('üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π...');
                $runner->runFieldResetTests();
                break;
                
            case 'stats':
                $this->info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ—Å—Ç–æ–≤...');
                $this->displayTestStatistics($runner);
                break;
                
            case 'full':
            case 'create':
            case 'update':
            default:
                $this->info('üéØ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —Ç–µ—Å—Ç–æ–≤...');
                $runner->runFullTestSuite();
                break;
        }
    }

    /**
     * –í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–µ—Å—Ç–æ–≤
     */
    private function displayTestStatistics($runner): void
    {
        $stats = $runner->getTestStatistics();
        
        $this->info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã—Ö —Ç–µ—Å—Ç–æ–≤:');
        $this->info('');
        
        $headers = ['–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤'];
        $rows = [];
        
        foreach ($stats as $operationType => $count) {
            if ($operationType === 'total') {
                continue;
            }
            
            $rows[] = [
                $this->formatOperationType($operationType),
                number_format($count)
            ];
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        $rows[] = ['', ''];
        $rows[] = ['–ò–¢–û–ì–û', number_format($stats['total'])];
        
        $this->table($headers, $rows);
        
        $this->info('');
        $this->warn('‚ö†Ô∏è  –≠—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ —É—á–µ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏');
        
        if ($stats['total'] > 10000) {
            $this->warn('‚ö†Ô∏è  –ü–æ–ª–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –æ—á–µ–Ω—å –≤–µ–ª–∏–∫–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
            $this->warn('    –ü—Ä–∏–º–µ—Ä: --max-tests=100 --max-combinations=2 --max-permutations=6');
        }
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞
     */
    private function formatOperationType(string $operationType): string
    {
        $translations = [
            'message_create_single_one' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∫–∞–ø—ã',
            'message_create_single_many' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–ø',
            'message_create_group_one' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–æ–¥–Ω–∞)',
            'message_create_group_many' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ (–º–Ω–æ–≥–æ)',
            'message_update_single_one' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∫–∞–ø—ã',
            'message_update_single_many' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–ø',
            'message_update_group_one' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–¥–Ω–∞)',
            'message_update_group_many' => '–°–æ–æ–±—â–µ–Ω–∏–µ: –ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–Ω–æ–≥–æ)',
            'reply_update_single_one' => '–û—Ç–≤–µ—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∫–∞–ø—ã',
            'reply_update_single_many' => '–û—Ç–≤–µ—Ç: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–ø',
            'reply_update_group_one' => '–û—Ç–≤–µ—Ç: –ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–¥–Ω–∞)',
            'reply_update_group_many' => '–û—Ç–≤–µ—Ç: –ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–Ω–æ–≥–æ)',
            'quote_update_single_one' => '–¶–∏—Ç–∞—Ç–∞: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–¥–∏–Ω–æ—á–Ω–æ–π –∫–∞–ø—ã',
            'quote_update_single_many' => '–¶–∏—Ç–∞—Ç–∞: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–ø',
            'quote_update_group_one' => '–¶–∏—Ç–∞—Ç–∞: –ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ–¥–Ω–∞)',
            'quote_update_group_many' => '–¶–∏—Ç–∞—Ç–∞: –ì—Ä—É–ø–ø–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–º–Ω–æ–≥–æ)',
        ];
        
        return $translations[$operationType] ?? $operationType;
    }

    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
     */
    public function showHelp(): void
    {
        $this->info('üöÄ –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞–ø');
        $this->info('');
        $this->info('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
        $this->line('   ‚Ä¢ full    - –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)');
        $this->line('   ‚Ä¢ quick   - –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä)');
        $this->line('   ‚Ä¢ create  - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø');
        $this->line('   ‚Ä¢ update  - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø');
        $this->line('   ‚Ä¢ status  - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç—É—Å–∞');
        $this->line('   ‚Ä¢ reset   - –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç—ã —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π');
        $this->line('   ‚Ä¢ stats   - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤');
        $this->info('');
        $this->info('üîß –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
        $this->line('   ‚Ä¢ php artisan test:dynamic-cap-system');
        $this->line('   ‚Ä¢ php artisan test:dynamic-cap-system quick');
        $this->line('   ‚Ä¢ php artisan test:dynamic-cap-system create --max-tests=20');
        $this->line('   ‚Ä¢ php artisan test:dynamic-cap-system full --max-combinations=2');
        $this->line('   ‚Ä¢ php artisan test:dynamic-cap-system status --silent');
        $this->line('   ‚Ä¢ php artisan test:dynamic-cap-system stats');
        $this->info('');
        $this->info('‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏:');
        $this->line('   ‚Ä¢ --max-tests=N        - –ú–∞–∫—Å–∏–º—É–º —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏');
        $this->line('   ‚Ä¢ --max-combinations=N - –ú–∞–∫—Å–∏–º—É–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–æ–ª–µ–π');
        $this->line('   ‚Ä¢ --max-permutations=N - –ú–∞–∫—Å–∏–º—É–º –ø–µ—Ä–µ—Å—Ç–∞–Ω–æ–≤–æ–∫');
        $this->line('   ‚Ä¢ --timeout=N          - –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö');
        $this->line('   ‚Ä¢ --no-reports         - –ù–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –æ—Ç—á–µ—Ç—ã');
        $this->line('   ‚Ä¢ --no-cleanup         - –ù–µ –æ—á–∏—â–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
        $this->line('   ‚Ä¢ --silent             - –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º');
        $this->info('');
        $this->warn('‚ö†Ô∏è  –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!');
        $this->warn('    –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å —Å quick –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è');
    }
} 