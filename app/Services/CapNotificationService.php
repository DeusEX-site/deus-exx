<?php

namespace App\Services;

use App\Models\Cap;
use App\Models\Message;
use App\Models\Chat;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;

class CapNotificationService
{
    private $botToken;
    private $enabled;
    private $adminChatId;
    
    public function __construct()
    {
        $this->botToken = config('telegram.bot_token');
        $this->enabled = config('telegram.cap_notifications.enabled', true);
        $this->adminChatId = config('telegram.cap_notifications.admin_chat_id');
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–∞–ø–µ
     */
    public function sendNewCapNotification($cap, $sourceMessage)
    {
        if (!$this->enabled || !$this->botToken) {
            return false;
        }
        
        try {
            $text = $this->formatNewCapMessage($cap, $sourceMessage);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if ($this->adminChatId) {
                $this->sendToChat($this->adminChatId, $text);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
            $originalChat = $sourceMessage->chat;
            if ($originalChat && $originalChat->chat_id) {
                $this->sendToChat($originalChat->chat_id, $text);
            }
            
            Log::info('Cap notification sent', [
                'cap_id' => $cap->id,
                'message_id' => $sourceMessage->id,
                'type' => 'new_cap'
            ]);
            
            return true;
            
        } catch (\Exception $e) {
            Log::error('Failed to send cap notification', [
                'cap_id' => $cap->id,
                'error' => $e->getMessage()
            ]);
            
            return false;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ø—ã
     */
    public function sendCapUpdateNotification($cap, $sourceMessage, $oldValues, $newValues, $changedFields)
    {
        if (!$this->enabled || !$this->botToken) {
            return false;
        }
        
        try {
            $text = $this->formatUpdateCapMessage($cap, $sourceMessage, $oldValues, $newValues, $changedFields);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if ($this->adminChatId) {
                $this->sendToChat($this->adminChatId, $text);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
            $originalChat = $sourceMessage->chat;
            if ($originalChat && $originalChat->chat_id) {
                $this->sendToChat($originalChat->chat_id, $text);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç –≥–¥–µ –±—ã–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∫–∞–ø–∞ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
            $targetChat = $cap->message->chat;
            if ($targetChat && $targetChat->chat_id && $targetChat->chat_id !== $originalChat->chat_id) {
                $updateText = $this->formatTargetUpdateMessage($cap, $sourceMessage, $oldValues, $newValues, $changedFields);
                $this->sendToChat($targetChat->chat_id, $updateText);
            }
            
            Log::info('Cap update notification sent', [
                'cap_id' => $cap->id,
                'source_message_id' => $sourceMessage->id,
                'changed_fields' => $changedFields,
                'type' => 'cap_update'
            ]);
            
            return true;
            
        } catch (\Exception $e) {
            Log::error('Failed to send cap update notification', [
                'cap_id' => $cap->id,
                'error' => $e->getMessage()
            ]);
            
            return false;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
     */
    public function sendUnchangedCapNotification($cap, $sourceMessage)
    {
        if (!$this->enabled || !$this->botToken) {
            return false;
        }
        
        try {
            $text = $this->formatUnchangedCapMessage($cap, $sourceMessage);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if ($this->adminChatId) {
                $this->sendToChat($this->adminChatId, $text);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
            $originalChat = $sourceMessage->chat;
            if ($originalChat && $originalChat->chat_id) {
                $this->sendToChat($originalChat->chat_id, $text);
            }
            
            Log::info('Cap unchanged notification sent', [
                'cap_id' => $cap->id,
                'message_id' => $sourceMessage->id,
                'type' => 'cap_unchanged'
            ]);
            
            return true;
            
        } catch (\Exception $e) {
            Log::error('Failed to send cap unchanged notification', [
                'cap_id' => $cap->id,
                'error' => $e->getMessage()
            ]);
            
            return false;
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä—É–ø–ø–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
     */
    public function sendBulkUpdateNotification($sourceMessage, $updates)
    {
        if (!$this->enabled || !$this->botToken || empty($updates)) {
            return false;
        }
        
        try {
            $text = $this->formatBulkUpdateMessage($sourceMessage, $updates);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–¥–º–∏–Ω—Å–∫–∏–π —á–∞—Ç (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if ($this->adminChatId) {
                $this->sendToChat($this->adminChatId, $text);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∏—Å—Ö–æ–¥–Ω—ã–π —á–∞—Ç
            $originalChat = $sourceMessage->chat;
            if ($originalChat && $originalChat->chat_id) {
                $this->sendToChat($originalChat->chat_id, $text);
            }
            
            Log::info('Bulk cap update notification sent', [
                'source_message_id' => $sourceMessage->id,
                'updates_count' => count($updates),
                'type' => 'bulk_update'
            ]);
            
            return true;
            
        } catch (\Exception $e) {
            Log::error('Failed to send bulk update notification', [
                'source_message_id' => $sourceMessage->id,
                'error' => $e->getMessage()
            ]);
            
            return false;
        }
    }
    
    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç
     */
    private function sendToChat($chatId, $text)
    {
        $response = Http::timeout(10)->post("https://api.telegram.org/bot{$this->botToken}/sendMessage", [
            'chat_id' => $chatId,
            'text' => $text,
            'parse_mode' => 'HTML',
            'disable_web_page_preview' => true
        ]);
        
        $result = $response->json();
        
        if (!$result['ok']) {
            throw new \Exception('Telegram API error: ' . ($result['description'] ?? 'Unknown error'));
        }
        
        return $result;
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∫–∞–ø–µ
     */
    private function formatNewCapMessage($cap, $sourceMessage)
    {
        $emoji = 'üí∞';
        $header = "{$emoji} <b>–ù–û–í–ê–Ø –ö–ê–ü–ê</b>";
        
        $capInfo = $this->formatCapInfo($cap);
        $sourceInfo = $this->formatSourceInfo($sourceMessage);
        
        return "{$header}\n\n{$capInfo}\n\n{$sourceInfo}";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–∞–ø—ã
     */
    private function formatUpdateCapMessage($cap, $sourceMessage, $oldValues, $newValues, $changedFields)
    {
        $emoji = 'üîÑ';
        $header = "{$emoji} <b>–û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–ü–´</b>";
        
        $capInfo = $this->formatCapInfo($cap);
        $changesInfo = $this->formatChangesInfo($oldValues, $newValues, $changedFields);
        $sourceInfo = $this->formatSourceInfo($sourceMessage);
        
        return "{$header}\n\n{$capInfo}\n\n{$changesInfo}\n\n{$sourceInfo}";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –∫–∞–ø–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
     */
    private function formatUnchangedCapMessage($cap, $sourceMessage)
    {
        $emoji = '‚úÖ';
        $header = "{$emoji} <b>–ö–ê–ü–ê –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô</b>";
        
        $capInfo = $this->formatCapInfo($cap);
        $sourceInfo = $this->formatSourceInfo($sourceMessage);
        $statusInfo = "üìã <b>–°—Ç–∞—Ç—É—Å:</b> –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏";
        
        return "{$header}\n\n{$capInfo}\n\n{$statusInfo}\n\n{$sourceInfo}";
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –≥–¥–µ –æ–±–Ω–æ–≤–∏–ª–∞—Å—å –∫–∞–ø–∞
     */
    private function formatTargetUpdateMessage($cap, $sourceMessage, $oldValues, $newValues, $changedFields)
    {
        $emoji = 'üìù';
        $header = "{$emoji} <b>–í–ê–®–ê –ö–ê–ü–ê –û–ë–ù–û–í–õ–ï–ù–ê</b>";
        
        $capInfo = $this->formatCapInfo($cap);
        $changesInfo = $this->formatChangesInfo($oldValues, $newValues, $changedFields);
        $sourceInfo = "üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:</b> {$sourceMessage->chat->title}";
        
        return "{$header}\n\n{$capInfo}\n\n{$changesInfo}\n\n{$sourceInfo}";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥—Ä—É–ø–ø–æ–≤–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
     */
    private function formatBulkUpdateMessage($sourceMessage, $updates)
    {
        $emoji = 'üìä';
        $count = count($updates);
        $header = "{$emoji} <b>–ú–ê–°–°–û–í–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï –ö–ê–ü ({$count})</b>";
        
        $sourceInfo = $this->formatSourceInfo($sourceMessage);
        
        $updatesInfo = "";
        foreach ($updates as $index => $update) {
            $cap = $update['cap'];
            $changedFields = $update['changed_fields'];
            
            $num = $index + 1;
            $affiliate = $cap->affiliate_name ?: '‚Äî';
            $broker = $cap->broker_name ?: '‚Äî';
            $geos = !empty($cap->geos) ? implode(', ', $cap->geos) : '‚Äî';
            $fields = !empty($changedFields) ? implode(', ', $this->translateFields($changedFields)) : '‚Äî';
            
            $updatesInfo .= "{$num}. <b>{$affiliate} - {$broker}</b>\n";
            $updatesInfo .= "   üìç –ì–µ–æ: {$geos}\n";
            $updatesInfo .= "   üîß –ò–∑–º–µ–Ω–µ–Ω–æ: {$fields}\n\n";
        }
        
        return "{$header}\n\n{$updatesInfo}{$sourceInfo}";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–ø–µ
     */
    private function formatCapInfo($cap)
    {
        $affiliate = $cap->affiliate_name ?: '‚Äî';
        $broker = $cap->broker_name ?: '‚Äî';
        $capAmounts = !empty($cap->cap_amounts) ? implode(', ', $cap->cap_amounts) : '‚Äî';
        $totalAmount = $cap->total_amount === -1 ? '‚àû' : ($cap->total_amount ?: '‚Äî');
        $schedule = $cap->schedule ?: '24/7';
        $date = $cap->date ?: '‚àû';
        $geos = !empty($cap->geos) ? implode(', ', $cap->geos) : '‚Äî';
        
        return "üíº <b>–ê—Ñ—Ñ–∏–ª–µ–π—Ç:</b> {$affiliate}\n" .
               "üè¢ <b>–ë—Ä–æ–∫–µ—Ä:</b> {$broker}\n" .
               "üí∞ <b>–ö–∞–ø–∞:</b> {$capAmounts}\n" .
               "üìä <b>–û–±—â–∏–π –ª–∏–º–∏—Ç:</b> {$totalAmount}\n" .
               "‚è∞ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b> {$schedule}\n" .
               "üìÖ <b>–î–∞—Ç–∞:</b> {$date}\n" .
               "üìç <b>–ì–µ–æ:</b> {$geos}";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
     */
    private function formatChangesInfo($oldValues, $newValues, $changedFields)
    {
        if (empty($changedFields)) {
            return "üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π";
        }
        
        $changes = [];
        foreach ($changedFields as $field) {
            $oldValue = $this->formatFieldValue($field, $oldValues[$field] ?? null);
            $newValue = $this->formatFieldValue($field, $newValues[$field] ?? null);
            $fieldName = $this->translateField($field);
            
            $changes[] = "   {$fieldName}: {$oldValue} ‚Üí {$newValue}";
        }
        
        return "üîß <b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b>\n" . implode("\n", $changes);
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
     */
    private function formatSourceInfo($sourceMessage)
    {
        $chatName = $sourceMessage->chat->title ?: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Ç';
        $userName = $sourceMessage->display_name ?: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        $time = $sourceMessage->created_at->format('d.m.Y H:i');
        
        return "üîó <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {$chatName}\n" .
               "üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {$userName}\n" .
               "üïê <b>–í—Ä–µ–º—è:</b> {$time}";
    }
    
    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private function formatFieldValue($field, $value)
    {
        if ($value === null || $value === '') {
            return '‚Äî';
        }
        
        if (is_array($value)) {
            return implode(', ', $value);
        }
        
        if ($field === 'total_amount' && $value === -1) {
            return '‚àû';
        }
        
        if (is_bool($value)) {
            return $value ? '–î–∞' : '–ù–µ—Ç';
        }
        
        return (string) $value;
    }
    
    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–ª—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
     */
    private function translateField($field)
    {
        $translations = [
            'cap_amounts' => 'üí∞ –ö–∞–ø–∞',
            'total_amount' => 'üìä –û–±—â–∏–π –ª–∏–º–∏—Ç',
            'schedule' => '‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
            'date' => 'üìÖ –î–∞—Ç–∞',
            'is_24_7' => 'üïê 24/7',
            'work_hours' => '‚è±Ô∏è –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã',
            'highlighted_text' => 'üñçÔ∏è –í—ã–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç'
        ];
        
        return $translations[$field] ?? $field;
    }
    
    /**
     * –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∞—Å—Å–∏–≤ –ø–æ–ª–µ–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π
     */
    private function translateFields($fields)
    {
        return array_map([$this, 'translateField'], $fields);
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∫–ª—é—á–µ–Ω—ã –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public function isEnabled()
    {
        return $this->enabled && !empty($this->botToken);
    }
    
    /**
     * –í–∫–ª—é—á–∞–µ—Ç/–≤—ã–∫–ª—é—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
     */
    public function setEnabled($enabled)
    {
        $this->enabled = $enabled;
    }
} 