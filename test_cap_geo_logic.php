<?php

require_once 'bootstrap/app.php';

use App\Services\CapAnalysisService;
use App\Models\Message;
use App\Models\Chat;

echo "üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–∏ cap/geo –∏ funnel\n";
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n";

$capService = new CapAnalysisService();

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
$chat = Chat::firstOrCreate([
    'chat_id' => 999999999,
    'type' => 'group',
    'title' => 'Test Logic Chat',
    'is_active' => true
]);

$testCases = [
    [
        'name' => '–†–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ cap/geo',
        'text' => "affiliate: TestAffiliate\nrecipient: TestBroker\ncap: 100 200 300\ngeo: RU UA DE",
        'expected' => 'success',
        'description' => 'cap: [100,200,300] + geo: [RU,UA,DE] = 1 –∑–∞–ø–∏—Å—å —Å –º–∞—Å—Å–∏–≤–∞–º–∏'
    ],
    [
        'name' => '–û–¥–Ω–∞ cap, –Ω–µ—Å–∫–æ–ª—å–∫–æ geo',
        'text' => "affiliate: TestAffiliate\nrecipient: TestBroker\ncap: 100\ngeo: RU UA DE",
        'expected' => 'success', 
        'description' => 'cap: [100] + geo: [RU,UA,DE] = 1 –∑–∞–ø–∏—Å—å —Å —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–Ω–æ–π cap'
    ],
    [
        'name' => '–ù–µ—Å–∫–æ–ª—å–∫–æ cap, –æ–¥–Ω–æ geo',
        'text' => "affiliate: TestAffiliate\nrecipient: TestBroker\ncap: 100 200 300\ngeo: RU",
        'expected' => 'success',
        'description' => 'cap: [100,200,300] + geo: [RU] = 1 –∑–∞–ø–∏—Å—å —Å —Ä–∞–∑–º–Ω–æ–∂–µ–Ω–Ω—ã–º geo'
    ],
    [
        'name' => '–ù–µ—Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å—Å—è)',
        'text' => "affiliate: TestAffiliate\nrecipient: TestBroker\ncap: 100 200\ngeo: RU UA DE",
        'expected' => 'failure',
        'description' => 'cap: [100,200] + geo: [RU,UA,DE] = –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ (—Ä–∞–∑–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞, –Ω–∏ –æ–¥–Ω–æ –Ω–µ —Ä–∞–≤–Ω–æ 1)'
    ],
    [
        'name' => '–ü—Ä–æ–±–ª–µ–º–Ω—ã–π —Ç–µ—Å—Ç –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞',
        'text' => "affiliate: XYZ Company\nrecipient: BinaryBroker\ncap: 25 50 75 100\ngeo: FR IT ES",
        'expected' => 'failure',
        'description' => 'cap: [25,50,75,100] + geo: [FR,IT,ES] = –¥–æ–ª–∂–Ω–æ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å—Å—è'
    ],
    [
        'name' => '–¢–µ—Å—Ç funnel –∫–∞–∫ –º–∞—Å—Å–∏–≤',
        'text' => "affiliate: TestAffiliate\nrecipient: TestBroker\ncap: 100\ngeo: RU\nfunnel: crypto, forex, binary",
        'expected' => 'success',
        'description' => '–¢–µ—Å—Ç funnel –∫–∞–∫ –º–∞—Å—Å–∏–≤–∞'
    ],
    [
        'name' => '–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π',
        'text' => "affiliate: mbt internal\nrecipient: Global KZ\ncap: 50\ngeo: US UK CA",
        'expected' => 'success',
        'description' => '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –ø–æ–ª–µ–π'
    ]
];

$successCount = 0;
$failureCount = 0;

foreach ($testCases as $index => $test) {
    echo "üìù –¢–ï–°–¢ #" . ($index + 1) . ": {$test['name']}\n";
    echo "   –°–æ–æ–±—â–µ–Ω–∏–µ: " . str_replace("\n", "\\n", $test['text']) . "\n";
    echo "   –û–∂–∏–¥–∞–Ω–∏–µ: {$test['expected']}\n";
    echo "   –û–ø–∏—Å–∞–Ω–∏–µ: {$test['description']}\n";
    
    // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $message = Message::create([
        'message_id' => 1000 + $index,
        'chat_id' => $chat->id,
        'message' => $test['text'],
        'display_name' => 'TestUser',
        'timestamp' => now(),
        'is_outgoing' => false
    ]);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    $result = $capService->analyzeAndSaveCapMessage($message->id, $test['text']);
    
    $actualResult = ($result['cap_entries_count'] > 0) ? 'success' : 'failure';
    
    if ($actualResult === $test['expected']) {
        echo "   ‚úÖ –ö–û–†–†–ï–ö–¢–ù–û: –ø–æ–ª—É—á–µ–Ω {$actualResult}\n";
        $successCount++;
        
        // –î–ª—è —É—Å–ø–µ—à–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        if ($actualResult === 'success') {
            $caps = \App\Models\Cap::where('message_id', $message->id)->get();
            foreach ($caps as $cap) {
                echo "   üìä –°–æ–∑–¥–∞–Ω–∞ cap: amounts=" . json_encode($cap->cap_amounts) . 
                     ", geos=" . json_encode($cap->geos) . 
                     ", funnels=" . json_encode($cap->funnels) . "\n";
            }
        }
    } else {
        echo "   ‚ùå –ù–ï–ö–û–†–†–ï–ö–¢–ù–û: –æ–∂–∏–¥–∞–ª—Å—è {$test['expected']}, –ø–æ–ª—É—á–µ–Ω {$actualResult}\n";
        $failureCount++;
    }
    echo "\n";
}

echo "üéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:\n";
echo "‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {$successCount}\n";
echo "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö: {$failureCount}\n";
echo "üìä –¢–æ—á–Ω–æ—Å—Ç—å: " . round(($successCount / count($testCases)) * 100, 1) . "%\n\n";

if ($failureCount === 0) {
    echo "üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.\n";
} else {
    echo "‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –ª–æ–≥–∏–∫–µ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞.\n";
}

// –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
Message::where('chat_id', $chat->id)->delete();
\App\Models\Cap::whereIn('message_id', range(1000, 1000 + count($testCases)))->delete();
$chat->delete();

echo "\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã.\n"; 