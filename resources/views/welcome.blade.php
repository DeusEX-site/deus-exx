<!DOCTYPE html>
<html lang="{{ str_replace('_', '-', app()->getLocale()) }}">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <meta name="csrf-token" content="{{ csrf_token() }}">
        <title>Laravel WebSocket Demo</title>

        <!-- Fonts -->
        <link rel="preconnect" href="https://fonts.bunny.net">
        <link href="https://fonts.bunny.net/css?family=figtree:400,500,600&display=swap" rel="stylesheet" />

        <!-- Styles -->
        <style>
            * {
                box-sizing: border-box;
                margin: 0;
                padding: 0;
            }
            
            body {
                font-family: 'Figtree', sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: #333;
            }
            
            .container {
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }
            
            .header {
                text-align: center;
                color: white;
                margin-bottom: 30px;
            }
            
            .header h1 {
                font-size: 2.5rem;
                font-weight: 600;
                margin-bottom: 10px;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            }
            
            .header p {
                font-size: 1.1rem;
                opacity: 0.9;
            }
            
            .auth-links {
                position: absolute;
                top: 20px;
                right: 20px;
            }
            
            .auth-links a {
                color: white;
                text-decoration: none;
                margin-left: 20px;
                padding: 8px 16px;
                border-radius: 20px;
                background: rgba(255,255,255,0.2);
                transition: all 0.3s ease;
            }
            
            .auth-links a:hover {
                background: rgba(255,255,255,0.3);
                transform: translateY(-2px);
            }
            
            .main-content {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 30px;
                margin-top: 20px;
            }
            
            .messages-section, .controls-section {
                background: white;
                border-radius: 15px;
                padding: 25px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            }
            
            .section-title {
                font-size: 1.5rem;
                font-weight: 600;
                margin-bottom: 20px;
                color: #4a5568;
                border-bottom: 2px solid #e2e8f0;
                padding-bottom: 10px;
            }
            
            .messages-container {
                height: 400px;
                overflow-y: auto;
                border: 2px solid #e2e8f0;
                border-radius: 10px;
                padding: 15px;
                background: #f8fafc;
            }
            
            .message {
                background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
                color: white;
                padding: 12px 16px;
                border-radius: 20px;
                margin-bottom: 10px;
                box-shadow: 0 2px 10px rgba(79, 172, 254, 0.3);
                animation: slideIn 0.3s ease-out;
            }
            
            .message:nth-child(even) {
                background: linear-gradient(135deg, #a8edea 0%, #fed6e3 100%);
                color: #2d3748;
                box-shadow: 0 2px 10px rgba(168, 237, 234, 0.3);
            }
            
            .message-header {
                display: flex;
                justify-content: space-between;
                font-size: 0.85rem;
                opacity: 0.8;
                margin-bottom: 5px;
            }
            
            .message-text {
                font-size: 1rem;
                font-weight: 500;
            }
            
            .test-controls {
                margin-bottom: 25px;
            }
            
            .test-form {
                display: flex;
                flex-direction: column;
                gap: 15px;
            }
            
            .form-group {
                display: flex;
                flex-direction: column;
            }
            
            .form-group label {
                font-weight: 500;
                margin-bottom: 5px;
                color: #4a5568;
            }
            
            .form-group input {
                padding: 12px;
                border: 2px solid #e2e8f0;
                border-radius: 8px;
                font-size: 1rem;
                transition: border-color 0.3s ease;
            }
            
            .form-group input:focus {
                outline: none;
                border-color: #4facfe;
                box-shadow: 0 0 0 3px rgba(79, 172, 254, 0.1);
            }
            
            .btn {
                padding: 12px 24px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 8px;
                font-size: 1rem;
                font-weight: 500;
                cursor: pointer;
                transition: all 0.3s ease;
            }
            
            .btn:hover {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }
            
            .status {
                padding: 12px;
                border-radius: 8px;
                margin-top: 15px;
                font-weight: 500;
            }
            
            .status.success {
                background: #d4edda;
                color: #155724;
                border: 1px solid #c3e6cb;
            }
            
            .status.error {
                background: #f8d7da;
                color: #721c24;
                border: 1px solid #f5c6cb;
            }
            
            .connection-status {
                display: flex;
                align-items: center;
                gap: 10px;
                margin-bottom: 20px;
            }
            
            .status-dot {
                width: 12px;
                height: 12px;
                border-radius: 50%;
                background: #dc3545;
                animation: pulse 2s infinite;
            }
            
            .status-dot.connected {
                background: #28a745;
            }
            
            @keyframes slideIn {
                from {
                    transform: translateX(-20px);
                    opacity: 0;
                }
                to {
                    transform: translateX(0);
                    opacity: 1;
                }
            }
            
            @keyframes pulse {
                0% { transform: scale(1); }
                50% { transform: scale(1.1); }
                100% { transform: scale(1); }
            }
            
            @media (max-width: 768px) {
                .main-content {
                    grid-template-columns: 1fr;
                    gap: 20px;
                }
                
                .header h1 {
                    font-size: 2rem;
                }
            }
        </style>
    </head>
    <body>
        @if (Route::has('login'))
            <div class="auth-links">
                @auth
                    <a href="{{ url('/dashboard') }}">Dashboard</a>
                @else
                    <a href="{{ route('login') }}">–í–æ–π—Ç–∏</a>
                    @if (Route::has('register'))
                        <a href="{{ route('register') }}">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</a>
                    @endif
                @endauth
            </div>
        @endif

        <div class="container">
            <div class="header">
                <h1>üöÄ Laravel WebSocket Demo</h1>
                <p>–°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–µ–±-—Å–æ–∫–µ—Ç–∞–º–∏</p>
            </div>

            <div class="main-content">
                <!-- –°–µ–∫—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π -->
                <div class="messages-section">
                    <h2 class="section-title">üì® –°–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏</h2>
                    
                    <div class="connection-status">
                        <div class="status-dot" id="statusDot"></div>
                        <span id="connectionStatus">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...</span>
                    </div>
                    
                    <div class="messages-container" id="messagesContainer">
                        <div class="message">
                            <div class="message-header">
                                <span>–°–∏—Å—Ç–µ–º–∞</span>
                                <span>{{ now()->format('H:i:s') }}</span>
                            </div>
                            <div class="message-text">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...</div>
                        </div>
                    </div>
                </div>
                
                <!-- –°–µ–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è -->
                <div class="controls-section">
                    <h2 class="section-title">üéõÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</h2>
                    
                    <div class="test-controls">
                        <form class="test-form" id="messageForm">
                            <div class="form-group">
                                <label for="messageInput">–°–æ–æ–±—â–µ–Ω–∏–µ:</label>
                                <input type="text" 
                                       id="messageInput" 
                                       name="message" 
                                       placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..." 
                                       required>
                            </div>
                            
                            <button type="submit" class="btn">üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</button>
                        </form>
                        
                        <div id="sendStatus"></div>
                    </div>
                    
                    <div class="test-controls">
                        <h3 style="margin-bottom: 15px; color: #4a5568;">–ë—ã—Å—Ç—Ä—ã–µ —Ç–µ—Å—Ç—ã:</h3>
                        <button class="btn" onclick="sendTestMessage('–ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! üëã')">
                            –¢–µ—Å—Ç 1: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                        </button>
                        <br><br>
                        <button class="btn" onclick="sendTestMessage('–¢–µ—Å—Ç–∏—Ä—É—é –≤–µ–±-—Å–æ–∫–µ—Ç—ã üöÄ')">
                            –¢–µ—Å—Ç 2: –í–µ–±-—Å–æ–∫–µ—Ç—ã
                        </button>
                        <br><br>
                        <button class="btn" onclick="sendTestMessage('Laravel Broadcasting —Ä–∞–±–æ—Ç–∞–µ—Ç! üí™')">
                            –¢–µ—Å—Ç 3: Broadcasting
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Pusher CDN -->
        <script src="https://js.pusher.com/8.2.0/pusher.min.js"></script>
        
        <script>
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            let pusher;
            let channel;
            let messagesContainer = document.getElementById('messagesContainer');
            let statusDot = document.getElementById('statusDot');
            let connectionStatus = document.getElementById('connectionStatus');
            let messageForm = document.getElementById('messageForm');
            let sendStatus = document.getElementById('sendStatus');
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pusher (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏)
            function initializePusher() {
                try {
                    pusher = new Pusher('local-key', {
                        cluster: 'mt1',
                        wsHost: '{{ request()->getHost() }}',
                        wsPort: 6001,
                        wssPort: 6001,
                        forceTLS: false,
                        enabledTransports: ['ws', 'wss'],
                        disableStats: true,
                        authEndpoint: '/broadcasting/auth'
                    });
                    
                    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–Ω–∞–ª—É
                    channel = pusher.subscribe('messages');
                    
                    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π Pusher
                    pusher.connection.bind('connected', function() {
                        statusDot.classList.add('connected');
                        connectionStatus.textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –≤–µ–±-—Å–æ–∫–µ—Ç—É!';
                        addSystemMessage('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–±-—Å–æ–∫–µ—Ç—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!');
                    });
                    
                    pusher.connection.bind('disconnected', function() {
                        statusDot.classList.remove('connected');
                        connectionStatus.textContent = '–û—Ç–∫–ª—é—á–µ–Ω–æ';
                        addSystemMessage('‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ');
                    });
                    
                    pusher.connection.bind('error', function(err) {
                        statusDot.classList.remove('connected');
                        connectionStatus.textContent = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
                        addSystemMessage('‚ùå –û—à–∏–±–∫–∞: ' + (err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
                    });
                    
                    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
                    channel.bind('message.sent', function(data) {
                        addMessage(data.user, data.message, data.timestamp);
                    });
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Pusher:', error);
                    statusDot.classList.remove('connected');
                    connectionStatus.textContent = '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏';
                    addSystemMessage('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-—Å–æ–∫–µ—Ç');
                    
                    // Fallback - –ø–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å polling
                    startPolling();
                }
            }
            
            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - polling (–µ—Å–ª–∏ –≤–µ–±-—Å–æ–∫–µ—Ç—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç)
            function startPolling() {
                addSystemMessage('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∂–∏–º –æ–ø—Ä–æ—Å–∞...');
                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É polling'–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            function addMessage(user, message, timestamp) {
                let messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                messageDiv.innerHTML = `
                    <div class="message-header">
                        <span>${user}</span>
                        <span>${timestamp}</span>
                    </div>
                    <div class="message-text">${message}</div>
                `;
                
                messagesContainer.appendChild(messageDiv);
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            function addSystemMessage(message) {
                let now = new Date();
                let timestamp = now.getHours().toString().padStart(2, '0') + ':' + 
                               now.getMinutes().toString().padStart(2, '0') + ':' + 
                               now.getSeconds().toString().padStart(2, '0');
                
                addMessage('–°–∏—Å—Ç–µ–º–∞', message, timestamp);
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API
            async function sendMessage(message) {
                try {
                    showSendStatus('‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞...', 'info');
                    
                    let response = await fetch('/send-message?message=' + encodeURIComponent(message), {
                        method: 'GET',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest',
                            'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                        }
                    });
                    
                    let data = await response.json();
                    
                    if (data.status === 'success') {
                        showSendStatus('‚úÖ ' + data.message, 'success');
                    } else {
                        showSendStatus('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', 'error');
                    }
                    
                } catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
                    showSendStatus('‚ùå –û—à–∏–±–∫–∞: ' + error.message, 'error');
                }
            }
            
            // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
            function showSendStatus(message, type) {
                sendStatus.textContent = message;
                sendStatus.className = 'status ' + type;
                
                setTimeout(() => {
                    sendStatus.textContent = '';
                    sendStatus.className = '';
                }, 3000);
            }
            
            // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            function sendTestMessage(message) {
                sendMessage(message);
            }
            
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
            messageForm.addEventListener('submit', function(e) {
                e.preventDefault();
                
                let messageInput = document.getElementById('messageInput');
                let message = messageInput.value.trim();
                
                if (message) {
                    sendMessage(message);
                    messageInput.value = '';
                }
            });
            
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            document.addEventListener('DOMContentLoaded', function() {
                initializePusher();
                
                // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                setTimeout(() => {
                    addSystemMessage('üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.');
                }, 1000);
            });
        </script>
    </body>
</html>
