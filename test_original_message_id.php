<?php

require_once 'vendor/autoload.php';

use App\Models\Cap;
use App\Models\CapHistory;
use App\Models\Message;
use App\Models\Chat;
use App\Services\CapAnalysisService;
use Illuminate\Support\Facades\Artisan;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Laravel
$app = require_once 'bootstrap/app.php';
$kernel = $app->make(Illuminate\Contracts\Console\Kernel::class);
$kernel->bootstrap();

echo "üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è original_message_id –≤ caps –∏ caps_history...\n\n";

$capAnalysisService = new CapAnalysisService();

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
$chat = Chat::updateOrCreate(
    ['chat_id' => -1001111111111],
    [
        'title' => 'Test Chat (Original Message ID)',
        'display_order' => 1
    ]
);

// –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
Cap::where('affiliate_name', 'ORIG_TEST')->delete();

echo "üìã –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã...\n";

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞–ø—É
$createMessage = Message::create([
    'chat_id' => $chat->id,
    'message_id' => 2001,
    'user_id' => 123,
    'username' => 'test_user',
    'display_name' => 'Test User',
    'message' => "Affiliate: ORIG_TEST\nRecipient: BrokerX\nCap: 25\nGeo: DE\nTotal: 100\nSchedule: 24/7",
    'date' => now(),
    'is_bot' => false,
    'is_outgoing' => false,
    'reply_to_message_id' => null
]);

$result1 = $capAnalysisService->analyzeAndSaveCapMessage($createMessage->id, $createMessage->message);

echo "–°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: " . $result1['cap_entries_count'] . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º original_message_id
$cap = Cap::where('affiliate_name', 'ORIG_TEST')->where('recipient_name', 'BrokerX')->first();

if ($cap) {
    echo "‚úÖ –ö–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞:\n";
    echo "   - ID: {$cap->id}\n";
    echo "   - message_id: {$cap->message_id}\n";
    echo "   - original_message_id: {$cap->original_message_id}\n";
    
    if ($cap->original_message_id == $cap->message_id) {
        echo "‚úÖ original_message_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—Ä–∞–≤–µ–Ω message_id)\n";
    } else {
        echo "‚ùå original_message_id —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n";
    }
} else {
    echo "‚ùå –ö–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

echo "\nüìã –®–∞–≥ 2: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–ø—ã —á–µ—Ä–µ–∑ reply —Å–æ–æ–±—â–µ–Ω–∏–µ...\n";

// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply)
$updateMessage = Message::create([
    'chat_id' => $chat->id,
    'message_id' => 2002,
    'user_id' => 123,
    'username' => 'test_user',
    'display_name' => 'Test User',
    'message' => "Cap: 30\nGeo: DE\nTotal: 150",
    'date' => now(),
    'is_bot' => false,
    'is_outgoing' => false,
    'reply_to_message_id' => 2001
]);

$result2 = $capAnalysisService->analyzeAndSaveCapMessage($updateMessage->id, $updateMessage->message);

echo "–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–∞–ø: " . $result2['updated_entries_count'] . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∫–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ original_message_id –æ—Å—Ç–∞–ª—Å—è –ø—Ä–µ–∂–Ω–∏–º
$updatedCap = Cap::where('affiliate_name', 'ORIG_TEST')->where('recipient_name', 'BrokerX')->first();

if ($updatedCap) {
    echo "‚úÖ –ö–∞–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:\n";
    echo "   - ID: {$updatedCap->id}\n";
    echo "   - message_id: {$updatedCap->message_id}\n";
    echo "   - original_message_id: {$updatedCap->original_message_id}\n";
    echo "   - cap_amounts: " . json_encode($updatedCap->cap_amounts) . "\n";
    echo "   - total_amount: {$updatedCap->total_amount}\n";
    
    if ($updatedCap->original_message_id == $createMessage->id) {
        echo "‚úÖ original_message_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n";
    } else {
        echo "‚ùå original_message_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n";
    }
} else {
    echo "‚ùå –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

echo "\nüìã –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–∞–ø...\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ø
$history = CapHistory::whereHas('cap', function($q) {
    $q->where('affiliate_name', 'ORIG_TEST');
})->get();

echo "–ó–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: " . $history->count() . "\n";

foreach ($history as $historyRecord) {
    echo "‚úÖ –ó–∞–ø–∏—Å—å –∏—Å—Ç–æ—Ä–∏–∏:\n";
    echo "   - ID: {$historyRecord->id}\n";
    echo "   - cap_id: {$historyRecord->cap_id}\n";
    echo "   - message_id: {$historyRecord->message_id}\n";
    echo "   - original_message_id: {$historyRecord->original_message_id}\n";
    echo "   - cap_amounts: " . json_encode($historyRecord->cap_amounts) . "\n";
    echo "   - total_amount: {$historyRecord->total_amount}\n";
    echo "   - archived_at: {$historyRecord->archived_at}\n";
    
    if ($historyRecord->original_message_id == $createMessage->id) {
        echo "‚úÖ original_message_id –≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n";
    } else {
        echo "‚ùå original_message_id –≤ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n";
    }
}

echo "\nüìã –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≥–µ–æ...\n";

// –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª—è—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º –≥–µ–æ
$newGeoMessage = Message::create([
    'chat_id' => $chat->id,
    'message_id' => 2003,
    'user_id' => 123,
    'username' => 'test_user',
    'display_name' => 'Test User',
    'message' => "Cap: 40\nGeo: FR\nTotal: 200",
    'date' => now(),
    'is_bot' => false,
    'is_outgoing' => false,
    'reply_to_message_id' => 2001
]);

$result3 = $capAnalysisService->analyzeAndSaveCapMessage($newGeoMessage->id, $newGeoMessage->message);

echo "–°–æ–∑–¥–∞–Ω–æ –∫–∞–ø: " . $result3['cap_entries_count'] . "\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤–∞—è –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º original_message_id
$newCap = Cap::where('affiliate_name', 'ORIG_TEST')
             ->where('recipient_name', 'BrokerX')
             ->whereJsonContains('geos', 'FR')
             ->first();

if ($newCap) {
    echo "‚úÖ –ù–æ–≤–∞—è –∫–∞–ø–∞ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è FR:\n";
    echo "   - ID: {$newCap->id}\n";
    echo "   - message_id: {$newCap->message_id}\n";
    echo "   - original_message_id: {$newCap->original_message_id}\n";
    echo "   - geos: " . json_encode($newCap->geos) . "\n";
    
    if ($newCap->original_message_id == $createMessage->id) {
        echo "‚úÖ original_message_id –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ø—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (—É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n";
    } else {
        echo "‚ùå original_message_id –¥–ª—è –Ω–æ–≤–æ–π –∫–∞–ø—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n";
    }
} else {
    echo "‚ùå –ù–æ–≤–∞—è –∫–∞–ø–∞ –¥–ª—è FR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n";
}

echo "\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...\n";

$allCaps = Cap::where('affiliate_name', 'ORIG_TEST')->get();
echo "–í—Å–µ–≥–æ –∫–∞–ø: " . $allCaps->count() . "\n";

foreach ($allCaps as $cap) {
    $geoString = is_array($cap->geos) ? implode(', ', $cap->geos) : $cap->geos;
    echo "- –ì–µ–æ: {$geoString}, Cap: {$cap->cap_amounts[0]}, Total: {$cap->total_amount}, original_message_id: {$cap->original_message_id}\n";
}

$allHistory = CapHistory::whereHas('cap', function($q) {
    $q->where('affiliate_name', 'ORIG_TEST');
})->get();
echo "–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: " . $allHistory->count() . "\n";

echo "\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n";
echo "\n=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===\n";
echo "‚úÖ original_message_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ caps\n";
echo "‚úÖ original_message_id –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ caps_history\n";
echo "‚úÖ –ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∫–∞–ø —á–µ—Ä–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è original_message_id –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –∫–∞–ø—ã\n";
echo "‚úÖ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç original_message_id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π\n"; 