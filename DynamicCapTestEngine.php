<?php

require_once 'vendor/autoload.php';
require_once 'DynamicCapTestGenerator.php';

use App\Models\Cap;
use App\Models\CapHistory;
use App\Models\Message;
use App\Models\Chat;
use App\Services\CapAnalysisService;

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –∫–∞–ø
 */
class DynamicCapTestEngine
{
    private $generator;
    private $capAnalysisService;
    private $testResults;
    private $testErrors;
    private $testChat;
    private $messageCounter;
    private $verbose;

    public function __construct(bool $verbose = true)
    {
        $this->generator = new DynamicCapTestGenerator();
        $this->capAnalysisService = new CapAnalysisService();
        $this->testResults = [];
        $this->testErrors = [];
        $this->messageCounter = 1000;
        $this->verbose = $verbose;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Laravel –µ—Å–ª–∏ –µ—â–µ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
        if (!app()) {
            $app = require_once 'bootstrap/app.php';
            $app->make(Illuminate\Contracts\Console\Kernel::class)->bootstrap();
        }
        
        $this->setupTestChat();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞
     */
    private function setupTestChat(): void
    {
        $this->log("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞...");
        
        $this->testChat = Chat::updateOrCreate(
            ['chat_id' => -99999999],
            [
                'type' => 'supergroup',
                'title' => 'Dynamic Cap Test Chat',
                'is_active' => true,
                'display_order' => 1,
                'created_at' => now(),
                'updated_at' => now()
            ]
        );
        
        $this->log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω/–Ω–∞–π–¥–µ–Ω —Å ID: {$this->testChat->id} (chat_id: {$this->testChat->chat_id})");
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        $this->log("üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
        
        $oldMessages = Message::where('chat_id', $this->testChat->id)->count();
        $oldCaps = Cap::whereIn('message_id', function($query) {
            $query->select('id')->from('messages')
                  ->where('chat_id', $this->testChat->id);
        })->count();
        
        $this->log("üìä –ù–∞–π–¥–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {$oldMessages} —Å–æ–æ–±—â–µ–Ω–∏–π, {$oldCaps} –∫–∞–ø");
        
        Cap::whereIn('message_id', function($query) {
            $query->select('id')->from('messages')
                  ->where('chat_id', $this->testChat->id);
        })->delete();
        
        Message::where('chat_id', $this->testChat->id)->delete();
        
        $this->log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –æ—á–∏—â–µ–Ω (ID: {$this->testChat->id})");
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    private function log(string $message): void
    {
        if ($this->verbose) {
            echo $message . "\n";
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function createTestMessage(string $content, ?int $replyToMessageId = null, ?string $quotedText = null): Message
    {
        $this->log("üí¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...");
        $this->log("üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ: " . substr($content, 0, 200) . "...");
        
        $message = Message::create([
            'chat_id' => $this->testChat->id,
            'telegram_message_id' => $this->messageCounter++,
            'user' => 'DynamicTestUser',
            'display_name' => 'Dynamic Test User',
            'message' => $content,
            'reply_to_message_id' => $replyToMessageId,
            'quoted_text' => $quotedText,
            'telegram_user_id' => 999999,
            'telegram_username' => 'dynamictestuser',
            'telegram_first_name' => 'Dynamic',
            'telegram_last_name' => 'Test',
            'telegram_date' => now(),
            'message_type' => 'text',
            'is_outgoing' => false,
            'created_at' => now(),
            'updated_at' => now()
        ]);
        
        $this->log("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {$message->id}");
        
        return $message;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private function analyzeMessage(Message $message): array
    {
        try {
            $this->log("üîç –ê–Ω–∞–ª–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è ID: {$message->id}");
            $this->log("üìù –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: " . substr($message->message, 0, 100) . "...");
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –¥–æ –∞–Ω–∞–ª–∏–∑–∞
            $capsBefore = Cap::where('message_id', $message->id)->count();
            $this->log("üìä –ö–∞–ø –¥–æ –∞–Ω–∞–ª–∏–∑–∞: {$capsBefore}");
            
            $result = $this->capAnalysisService->analyzeAndSaveCapMessage($message->id, $message->message);
            
            // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
            $capsAfter = Cap::where('message_id', $message->id)->count();
            $capsHistoryAfter = CapHistory::whereIn('cap_id', function($query) use ($message) {
                $query->select('id')->from('caps')->where('message_id', $message->id);
            })->count();
            
            $this->log("üìä –ö–∞–ø –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {$capsAfter}");
            $this->log("üìä –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ø: {$capsHistoryAfter}");
            $this->log("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: " . json_encode($result));
            
            return [
                'success' => true,
                'result' => $result,
                'error' => null,
                'caps_created' => $capsAfter,
                'caps_history_created' => $capsHistoryAfter
            ];
        } catch (Exception $e) {
            $this->log("‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . $e->getMessage());
            $this->log("üìç –°—Ç–µ–∫: " . $e->getTraceAsString());
            return [
                'success' => false,
                'result' => null,
                'error' => $e->getMessage()
            ];
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø
     */
    private function validateCapCreation(array $expectedCaps, array $analysisResult): array
    {
        $errors = [];
        
        $this->log("üîç –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø...");
        $this->log("üìä –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞–ø—ã: " . json_encode($expectedCaps));
        $this->log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: " . json_encode($analysisResult));
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞–ø
        $expectedCount = count($expectedCaps);
        $actualCount = $analysisResult['cap_entries_count'] ?? 0;
        
        $this->log("üìà –û–∂–∏–¥–∞–ª–æ—Å—å –∫–∞–ø: {$expectedCount}, —Å–æ–∑–¥–∞–Ω–æ: {$actualCount}");
        
        if ($expectedCount !== $actualCount) {
            $errors[] = "–û–∂–∏–¥–∞–ª–æ—Å—å {$expectedCount} –∫–∞–ø, —Å–æ–∑–¥–∞–Ω–æ {$actualCount}";
        }
        
        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ø –≤ –ë–î
        $totalCapsInDb = Cap::count();
        $this->log("üìà –í—Å–µ–≥–æ –∫–∞–ø –≤ –ë–î: {$totalCapsInDb}");
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î
        foreach ($expectedCaps as $index => $expectedCap) {
            $this->log("üîç –ü–æ–∏—Å–∫ –∫–∞–ø—ã #{$index}: {$expectedCap['affiliate']} -> {$expectedCap['recipient']} ({$expectedCap['geo']})");
            
            $foundCap = Cap::where('affiliate_name', strtolower($expectedCap['affiliate']))
                          ->where('recipient_name', strtolower($expectedCap['recipient']))
                          ->where('geo', strtolower($expectedCap['geo']))
                          ->first();
            
            if (!$foundCap) {
                $this->log("‚ùå –ö–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î");
                $errors[] = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞–ø–∞: {$expectedCap['affiliate']} -> {$expectedCap['recipient']} ({$expectedCap['geo']})";
                
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –∫–∞–ø—ã –µ—Å—Ç—å –≤ –ë–î –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                $allCaps = Cap::select('affiliate_name', 'recipient_name', 'geos', 'cap_amounts')->get();
                $this->log("üìã –í—Å–µ –∫–∞–ø—ã –≤ –ë–î: " . json_encode($allCaps->toArray()));
            } else {
                $this->log("‚úÖ –ö–∞–ø–∞ –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î —Å ID: {$foundCap->id}");
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π
                foreach ($expectedCap as $field => $expectedValue) {
                    if ($field === 'geo') continue; // –£–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –≤—ã—à–µ
                    
                    $actualValue = $foundCap->$field;
                    
                    if ($field === 'cap_amounts' && is_array($actualValue)) {
                        $actualValue = $actualValue[0] ?? null;
                    }
                    
                    $this->log("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—è {$field}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{$expectedValue}', –ø–æ–ª—É—á–µ–Ω–æ '{$actualValue}'");
                    
                    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                    if ($field === 'cap_amounts') {
                        if (intval($actualValue) !== intval($expectedValue)) {
                            $errors[] = "–ü–æ–ª–µ {$field}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{$expectedValue}', –ø–æ–ª—É—á–µ–Ω–æ '{$actualValue}'";
                        }
                    } else {
                        if (strtolower($actualValue) !== strtolower($expectedValue)) {
                            $errors[] = "–ü–æ–ª–µ {$field}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{$expectedValue}', –ø–æ–ª—É—á–µ–Ω–æ '{$actualValue}'";
                        }
                    }
                }
            }
        }
        
        $this->log($errors ? "‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " . json_encode($errors) : "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ");
        
        return $errors;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø
     */
    private function validateCapUpdate(array $expectedUpdates, array $analysisResult): array
    {
        $errors = [];
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–ø
        $expectedCount = count($expectedUpdates);
        $actualCount = $analysisResult['updated_entries_count'] ?? 0;
        
        if ($expectedCount !== $actualCount) {
            $errors[] = "–û–∂–∏–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {$expectedCount} –∫–∞–ø, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {$actualCount}";
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
        foreach ($expectedUpdates as $expectedUpdate) {
            $foundCap = Cap::where('affiliate_name', strtolower($expectedUpdate['affiliate']))
                          ->where('recipient_name', strtolower($expectedUpdate['recipient']))
                          ->where('geo', strtolower($expectedUpdate['geo']))
                          ->first();
            
            if (!$foundCap) {
                $errors[] = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞–ø–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {$expectedUpdate['affiliate']} -> {$expectedUpdate['recipient']} ({$expectedUpdate['geo']})";
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            foreach ($expectedUpdate['updates'] as $field => $expectedValue) {
                $actualValue = $foundCap->$field;
                
                if ($field === 'cap_amounts' && is_array($actualValue)) {
                    $actualValue = $actualValue[0] ?? null;
                }
                
                // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –ø–æ–ª–µ–π
                if ($field === 'cap_amounts') {
                    if (intval($actualValue) !== intval($expectedValue)) {
                        $errors[] = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è {$field}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{$expectedValue}', –ø–æ–ª—É—á–µ–Ω–æ '{$actualValue}'";
                    }
                } else {
                    if (strtolower($actualValue) !== strtolower($expectedValue)) {
                        $errors[] = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è {$field}: –æ–∂–∏–¥–∞–ª–æ—Å—å '{$expectedValue}', –ø–æ–ª—É—á–µ–Ω–æ '{$actualValue}'";
                    }
                }
            }
        }
        
        return $errors;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥ —Å—Ç–∞—Ç—É—Å–∞
     */
    private function validateStatusCommand(array $expectedStatuses, array $analysisResult): array
    {
        $errors = [];
        
        foreach ($expectedStatuses as $expectedStatus) {
            $foundCap = Cap::where('affiliate_name', strtolower($expectedStatus['affiliate']))
                          ->where('recipient_name', strtolower($expectedStatus['recipient']))
                          ->where('geo', strtolower($expectedStatus['geo']))
                          ->first();
            
            if (!$foundCap) {
                $errors[] = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞–ø–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {$expectedStatus['affiliate']} -> {$expectedStatus['recipient']} ({$expectedStatus['geo']})";
                continue;
            }
            
            $expectedStatusValue = strtoupper($expectedStatus['status']);
            $actualStatusValue = strtoupper($foundCap->status);
            
            if ($expectedStatusValue !== $actualStatusValue) {
                $errors[] = "–°—Ç–∞—Ç—É—Å: –æ–∂–∏–¥–∞–ª—Å—è '{$expectedStatusValue}', –ø–æ–ª—É—á–µ–Ω '{$actualStatusValue}'";
            }
        }
        
        return $errors;
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞–ø—ã
     */
    public function testSingleCapCreation(array $capData): array
    {
        $this->log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ–¥–Ω–æ–π –∫–∞–ø—ã...");
        $this->log("üìä –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: " . json_encode($capData));
        
        $messageText = $this->generator->generateSingleCapMessage($capData);
        $this->log("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:");
        $this->log($messageText);
        
        $message = $this->createTestMessage($messageText);
        
        $analysisResult = $this->analyzeMessage($message);
        
        if (!is_array($analysisResult) || !($analysisResult['success'] ?? false)) {
            $this->log("‚ùå –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ");
            return [
                'success' => false,
                'error' => "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . ($analysisResult['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                'message' => $messageText
            ];
        }
        
        $expectedCaps = [
            [
                'affiliate' => $capData['affiliate'] ?? '',
                'recipient' => $capData['recipient'] ?? '',
                'geo' => $capData['geo'] ?? '',
                'cap_amounts' => intval($capData['cap'] ?? '10')
            ]
        ];
        
        $this->log("üéØ –û–∂–∏–¥–∞–µ–º—ã–µ –∫–∞–ø—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: " . json_encode($expectedCaps));
        
        $errors = $this->validateCapCreation($expectedCaps, $analysisResult['result'] ?? []);
        
        $result = [
            'success' => empty($errors),
            'errors' => $errors,
            'message' => $messageText,
            'analysis_result' => $analysisResult['result'] ?? [],
            'caps_created_in_db' => $analysisResult['caps_created'] ?? 0,
            'caps_history_created' => $analysisResult['caps_history_created'] ?? 0
        ];
        
        $this->log($result['success'] ? "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ" : "‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ—É–¥–∞—á–Ω–æ");
        
        return $result;
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–ø
     */
    public function testMultiCapCreation(array $baseData, array $capValues, array $geoValues): array
    {
        $this->log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–ø...");
        
        if (!$this->generator->validateCapGeoFunnelCombination($capValues, $geoValues)) {
            return [
                'success' => false,
                'error' => "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–±–∏–Ω–∞—Ü–∏—è cap –∏ geo/funnel",
                'message' => 'N/A'
            ];
        }
        
        $messageText = $this->generator->generateMultiCapMessage($baseData, $capValues, $geoValues);
        $message = $this->createTestMessage($messageText);
        
        $analysisResult = $this->analyzeMessage($message);
        
        if (!is_array($analysisResult) || !($analysisResult['success'] ?? false)) {
            return [
                'success' => false,
                'error' => "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . ($analysisResult['error'] ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'),
                'message' => $messageText
            ];
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–∞–ø—ã
        $expectedCaps = [];
        foreach ($geoValues as $index => $geo) {
            $expectedCaps[] = [
                'affiliate' => $baseData['affiliate'] ?? '',
                'recipient' => $baseData['recipient'] ?? '',
                'geo' => $geo ?? '',
                'cap_amounts' => intval(count($capValues) === 1 ? ($capValues[0] ?? '10') : ($capValues[$index] ?? '10'))
            ];
        }
        
        $errors = $this->validateCapCreation($expectedCaps, $analysisResult['result'] ?? []);
        
        return [
            'success' => empty($errors),
            'errors' => $errors,
            'message' => $messageText,
            'analysis_result' => $analysisResult['result'] ?? []
        ];
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø
     */
    public function testGroupCapCreation(array $blocks): array
    {
        $this->log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø...");
        
        $messageText = $this->generator->generateGroupMessage($blocks);
        $message = $this->createTestMessage($messageText);
        
        $analysisResult = $this->analyzeMessage($message);
        
        if (!$analysisResult['success']) {
            return [
                'success' => false,
                'error' => "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . $analysisResult['error'],
                'message' => $messageText
            ];
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –∫–∞–ø—ã –∏–∑ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
        $expectedCaps = [];
        foreach ($blocks as $block) {
            $expectedCaps[] = [
                'affiliate' => $block['affiliate'],
                'recipient' => $block['recipient'],
                'geo' => $block['geo'],
                'cap_amounts' => intval($block['cap'] ?? '10')
            ];
        }
        
        $errors = $this->validateCapCreation($expectedCaps, $analysisResult['result']);
        
        return [
            'success' => empty($errors),
            'errors' => $errors,
            'message' => $messageText,
            'analysis_result' => $analysisResult['result']
        ];
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã
     */
    public function testCapUpdate(array $identifierFields, array $updateFields, ?int $replyToMessageId = null): array
    {
        $this->log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–ø—ã...");
        
        $messageText = $this->generator->generateUpdateMessage($identifierFields, $updateFields);
        $message = $this->createTestMessage($messageText, $replyToMessageId);
        
        $analysisResult = $this->analyzeMessage($message);
        
        if (!$analysisResult['success']) {
            return [
                'success' => false,
                'error' => "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . $analysisResult['error'],
                'message' => $messageText
            ];
        }
        
        $expectedUpdates = [
            [
                'affiliate' => $identifierFields['affiliate'],
                'recipient' => $identifierFields['recipient'],
                'geo' => $identifierFields['geo'],
                'updates' => $updateFields
            ]
        ];
        
        $errors = $this->validateCapUpdate($expectedUpdates, $analysisResult['result']);
        
        return [
            'success' => empty($errors),
            'errors' => $errors,
            'message' => $messageText,
            'analysis_result' => $analysisResult['result']
        ];
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞
     */
    public function testStatusCommand(array $identifierFields, string $command): array
    {
        $this->log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ç—É—Å–∞: {$command}...");
        
        $messageText = $this->generator->generateStatusCommand($identifierFields, $command);
        $message = $this->createTestMessage($messageText);
        
        $analysisResult = $this->analyzeMessage($message);
        
        if (!$analysisResult['success']) {
            return [
                'success' => false,
                'error' => "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . $analysisResult['error'],
                'message' => $messageText
            ];
        }
        
        $expectedStatuses = [
            [
                'affiliate' => $identifierFields['affiliate'],
                'recipient' => $identifierFields['recipient'],
                'geo' => $identifierFields['geo'],
                'status' => $command
            ]
        ];
        
        $errors = $this->validateStatusCommand($expectedStatuses, $analysisResult['result']);
        
        return [
            'success' => empty($errors),
            'errors' => $errors,
            'message' => $messageText,
            'analysis_result' => $analysisResult['result']
        ];
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π
     */
    public function testFieldReset(array $identifierFields, array $resetFields): array
    {
        $this->log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π...");
        
        $messageText = $this->generator->generateResetMessage($identifierFields, $resetFields);
        $message = $this->createTestMessage($messageText);
        
        $analysisResult = $this->analyzeMessage($message);
        
        if (!$analysisResult['success']) {
            return [
                'success' => false,
                'error' => "–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: " . $analysisResult['error'],
                'message' => $messageText
            ];
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã –¥–æ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        $foundCap = Cap::where('affiliate_name', strtolower($identifierFields['affiliate']))
                      ->where('recipient_name', strtolower($identifierFields['recipient']))
                      ->where('geo', strtolower($identifierFields['geo']))
                      ->first();
        
        $errors = [];
        if (!$foundCap) {
            $errors[] = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–∞–ø–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–æ–ª–µ–π";
        } else {
            $defaultValues = $this->generator->getDefaultValues();
            
            foreach ($resetFields as $field) {
                $expectedValue = $defaultValues[$field] ?? null;
                $actualValue = $foundCap->$field;
                
                if ($expectedValue !== $actualValue) {
                    $errors[] = "–ü–æ–ª–µ {$field} –Ω–µ —Å–±—Ä–æ—à–µ–Ω–æ: –æ–∂–∏–¥–∞–ª–æ—Å—å '{$expectedValue}', –ø–æ–ª—É—á–µ–Ω–æ '{$actualValue}'";
                }
            }
        }
        
        return [
            'success' => empty($errors),
            'errors' => $errors,
            'message' => $messageText,
            'analysis_result' => $analysisResult['result']
        ];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function getTestResults(): array
    {
        return $this->testResults;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function getTestErrors(): array
    {
        return $this->testErrors;
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
     */
    public function addTestResult(string $testName, array $result): void
    {
        $this->testResults[$testName] = $result;
        
        if (!$result['success']) {
            $this->testErrors[$testName] = $result;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public function clearResults(): void
    {
        $this->testResults = [];
        $this->testErrors = [];
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    public function cleanup(): void
    {
        // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–∞–ø, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∫–∞–ø–∞–º–∏
        CapHistory::whereIn('cap_id', function($query) {
            $query->select('id')->from('caps')
                  ->whereIn('message_id', function($subQuery) {
                      $subQuery->select('id')->from('messages')
                               ->where('chat_id', $this->testChat->id);
                  });
        })->delete();
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–ø—ã
        Cap::whereIn('message_id', function($query) {
            $query->select('id')->from('messages')
                  ->where('chat_id', $this->testChat->id);
        })->delete();
        
        // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        Message::where('chat_id', $this->testChat->id)->delete();
        
        $this->log("üßπ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã");
    }
} 