<?php

require_once 'bootstrap/app.php';

use App\Services\CapAnalysisService;
use App\Models\Message;
use App\Models\Chat;
use App\Models\Cap;

$capAnalysisService = new CapAnalysisService();

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —á–∞—Ç
$chat = Chat::firstOrCreate([
    'telegram_chat_id' => -999999,
    'chat_name' => 'Debug Test Chat',
    'display_order' => 999
]);

echo "üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ø—ã...\n\n";

// –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π
echo "üìã –¢–µ—Å—Ç 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø–æ–π\n";
$testMessage1 = Message::create([
    'chat_id' => $chat->id,
    'message_id' => 999990,
    'user_id' => 1,
    'display_name' => 'Debug User',
    'message' => "Affiliate: DebugAffiliate\nRecipient: DebugRecipient\nCap: 25\nGeo: DE"
]);

echo "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{$testMessage1->message}\n\n";

try {
    $result1 = $capAnalysisService->analyzeAndSaveCapMessage($testMessage1->id, $testMessage1->message);
    
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n";
    print_r($result1);
    
    if (isset($result1['cap_entries_count']) && $result1['cap_entries_count'] > 0) {
        echo "‚úÖ –ö–∞–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n";
    } else {
        echo "‚ùå –ö–∞–ø–∞ –ù–ï —Å–æ–∑–¥–∞–Ω–∞!\n";
        if (isset($result1['error'])) {
            echo "–û—à–∏–±–∫–∞: {$result1['error']}\n";
        }
    }
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
}

echo "\n" . str_repeat("-", 50) . "\n\n";

// –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞
echo "üìã –¢–µ—Å—Ç 2: –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø—Ä–æ—Å—Ç–∞—è)\n";
$testMessage2 = Message::create([
    'chat_id' => $chat->id,
    'message_id' => 999991,
    'reply_to_message_id' => $testMessage1->message_id,
    'user_id' => 1,
    'display_name' => 'Debug User',
    'message' => "STOP"
]);

echo "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {$testMessage2->message}\n";
echo "Reply to: {$testMessage2->reply_to_message_id}\n\n";

try {
    $result2 = $capAnalysisService->analyzeAndSaveCapMessage($testMessage2->id, $testMessage2->message);
    
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n";
    print_r($result2);
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
}

echo "\n" . str_repeat("-", 50) . "\n\n";

// –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π
echo "üìã –¢–µ—Å—Ç 3: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π —á–µ—Ä–µ–∑ reply\n";
$testMessage3 = Message::create([
    'chat_id' => $chat->id,
    'message_id' => 999992,
    'reply_to_message_id' => $testMessage1->message_id,
    'user_id' => 1,
    'display_name' => 'Debug User',
    'message' => "Geo: DE\nCap: 30\nSchedule: 10:00/18:00"
]);

echo "–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{$testMessage3->message}\n";
echo "Reply to: {$testMessage3->reply_to_message_id}\n\n";

try {
    $result3 = $capAnalysisService->analyzeAndSaveCapMessage($testMessage3->id, $testMessage3->message);
    
    echo "–†–µ–∑—É–ª—å—Ç–∞—Ç:\n";
    print_r($result3);
    
} catch (Exception $e) {
    echo "‚ùå –û—à–∏–±–∫–∞: " . $e->getMessage() . "\n";
}

echo "\n" . str_repeat("-", 50) . "\n\n";

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–∑–¥–∞–ª–æ—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n";
$caps = Cap::where('affiliate_name', 'DebugAffiliate')->get();
echo "–ù–∞–π–¥–µ–Ω–æ –∫–∞–ø: " . $caps->count() . "\n";
foreach ($caps as $cap) {
    echo "- {$cap->affiliate_name} ‚Üí {$cap->recipient_name} ({$cap->geos[0]}, {$cap->cap_amounts[0]}) - {$cap->status}\n";
}

// –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
echo "\nüßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n";
Cap::where('affiliate_name', 'DebugAffiliate')->delete();
$testMessage1->delete();
$testMessage2->delete();
$testMessage3->delete();
$chat->delete();

echo "‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.\n"; 